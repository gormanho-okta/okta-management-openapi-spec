openapi: 3.0.2
info:
  title: Okta API
  description: Allows customers to easily access the Okta API
  termsOfService: https://developer.okta.com/terms/
  contact:
    name: Okta Developer Team
    url: https://developer.okta.com/
    email: devex-public@okta.com
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 2.10.0
  x-logo:
    url: logo.svg
    backgroundColor: transparent
    altText: Okta Developer
externalDocs:
  description: Find more info here
  url: https://developer.okta.com/docs/api/getting_started/design_principles.html
servers:
  - url: https://{subdomain}.{domain}
    variables:
      subdomain:
        default: your-subdomain
        description: The subdomain of your organization
      domain:
        enum:
          - okta.com
          - oktapreview.com
          - okta-emea.com
        default: okta.com
        description: The okta domain of your organization.
  - url: https://{customDomain}
    variables:
      customDomain:
        default: auth.your-custom-domain.com
        description: The custom domain configured for your organization
tags:
  - name: Application
  - name: Authenticator
  - name: AuthorizationServer
  - name: Brand
  - name: CAPTCHA
  - name: Domain
  - name: EventHook
  - name: Feature
  - name: Group
  - name: IdentityProvider
  - name: InlineHook
  - name: SystemLog
  - name: ProfileMapping
  - name: UserType
  - name: Schema
  - name: LinkedObject
  - name: OrgSetting
  - name: Policy
  - name: Session
  - name: Subscription
  - name: Template
  - name: ThreatInsight
  - name: TrustedOrigin
  - name: User
  - name: UserFactor
  - name: NetworkZone
paths:
  /api/v1/apps:
    get:
      summary: List Applications
      description: Enumerates apps added to your organization with pagination. A subset of apps can be returned that match a supported filter expression or query.
      operationId: listApplications
      parameters:
        - name: q
          in: query
          schema:
            type: string
        - name: after
          in: query
          description: Specifies the pagination cursor for the next page of apps
          schema:
            type: string
        - name: limit
          in: query
          description: Specifies the number of results for a page
          schema:
            type: integer
            format: int32
            default: -1
        - name: filter
          in: query
          description: Filters apps by status, user.id, group.id or credentials.signing.kid expression
          schema:
            type: string
        - name: expand
          in: query
          description: Traverses users link relationship and optionally embeds Application User resource
          schema:
            type: string
        - name: includeNonDeleted
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.read
      tags:
        - Application
    post:
      summary: Add Application
      description: Adds a new application to your Okta organization.
      operationId: createApplication
      parameters:
        - name: activate
          in: query
          description: Executes activation lifecycle operation when creating the app
          schema:
            type: boolean
            default: true
        - name: OktaAccessGateway-Agent
          in: header
          schema:
            type: string
      x-codegen-request-body-name: application
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
  /api/v1/apps/{appId}:
    get:
      summary: Get Application
      description: Fetches an application from your Okta organization by `id`.
      operationId: getApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.read
      tags:
        - Application
    put:
      summary: Update Application
      description: Updates an application in your organization.
      operationId: updateApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: application
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
    delete:
      summary: Delete Application
      description: Removes an inactive application.
      operationId: deleteApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
  /api/v1/apps/{appId}/connections/default:
    get:
      summary: Fetches the default Provisioning Connection for an application.
      description: Get default Provisioning Connection for application
      operationId: getDefaultProvisioningConnectionForApplication
      parameters:
        - in: path
          name: appId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisioningConnection'
        '404':
          description: Not Found
      security:
        - api_token: []
        - oauth2:
            - okta.apps.read
      tags:
        - Application
    post:
      summary: Sets the default Provisioning Connection for an application.
      description: Set default Provisioning Connection for application
      operationId: setDefaultProvisioningConnectionForApplication
      parameters:
        - in: path
          name: appId
          required: true
          schema:
            type: string
        - in: query
          name: activate
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvisioningConnectionRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisioningConnection'
        '400':
          description: Bad Request
        '404':
          description: Not Found
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
  /api/v1/apps/{appId}/connections/default/lifecycle/activate:
    post:
      summary: Activate default Provisioning Connection for application
      description: Activates the default Provisioning Connection for an application.
      operationId: activateDefaultProvisioningConnectionForApplication
      parameters:
        - in: path
          name: appId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
  /api/v1/apps/{appId}/connections/default/lifecycle/deactivate:
    post:
      summary: Deactivate default Provisioning Connection for application
      description: Deactivates the default Provisioning Connection for an application.
      operationId: deactivateDefaultProvisioningConnectionForApplication
      parameters:
        - in: path
          name: appId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
  /api/v1/apps/{appId}/credentials/csrs:
    get:
      summary: List Certificate Signing Requests for Application
      description: Enumerates Certificate Signing Requests for an application
      operationId: listCsrsForApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Csr'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.read
      tags:
        - Application
    post:
      summary: Generate Certificate Signing Request for Application
      description: Generates a new key pair and returns the Certificate Signing Request for it.
      operationId: generateCsrForApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: metadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CsrMetadata'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Csr'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
  /api/v1/apps/{appId}/credentials/csrs/{csrId}:
    get:
      summary: Get Certificate Signing Request
      description: Fetches a certificate signing request for the app by `id`.
      operationId: getCsrForApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: csrId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Csr'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.read
      tags:
        - Application
    delete:
      summary: Revoke Certificate Signing Request
      description: Revokes a certificate signing request and deletes the key pair from the application.
      operationId: revokeCsrFromApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: csrId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
  /api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish:
    post:
      summary: Publish Certificate Signing Request
      description: Updates a certificate signing request for the app with a signed X.509 certificate and adds it into the application key credentials
      operationId: publishCsrFromApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: csrId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
          application/x-x509-ca-cert:
            schema:
              type: string
              format: binary
              x-okta-operationId: publishBinaryCerCert
          application/pkix-cert:
            schema:
              type: string
              format: binary
              x-okta-operationId: publishBinaryDerCert
          application/x-pem-file:
            schema:
              type: string
              format: binary
              x-okta-operationId: publishBinaryPemCert
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
  /api/v1/apps/{appId}/credentials/keys:
    get:
      summary: List Key Credentials for Application
      description: Enumerates key credentials for an application
      operationId: listApplicationKeys
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JsonWebKey'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.read
      tags:
        - Application
  /api/v1/apps/{appId}/credentials/keys/generate:
    post:
      summary: Generate Key Credential for Application
      description: Generates a new X.509 certificate for an application key credential
      operationId: generateApplicationKey
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: validityYears
          in: query
          schema:
            type: integer
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
  /api/v1/apps/{appId}/credentials/keys/{keyId}:
    get:
      summary: Get Key Credential for Application
      description: Gets a specific application key credential by kid
      operationId: getApplicationKey
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: keyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.read
      tags:
        - Application
  /api/v1/apps/{appId}/credentials/keys/{keyId}/clone:
    post:
      summary: Clone Application Key Credential
      description: Clones a X.509 certificate for an application key credential from a source application to target application.
      operationId: cloneApplicationKey
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: keyId
          in: path
          required: true
          schema:
            type: string
        - name: targetAid
          in: query
          description: Unique key of the target Application
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
  /api/v1/apps/{appId}/features:
    get:
      summary: Fetches the Feature objects for an application.
      description: List Features for application
      operationId: listFeaturesForApplication
      parameters:
        - in: path
          name: appId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApplicationFeature'
                type: array
        '404':
          description: Not Found
      security:
        - api_token: []
        - oauth2:
            - okta.apps.read
      tags:
        - Application
  /api/v1/apps/{appId}/features/{name}:
    get:
      summary: Fetches a Feature object for an application.
      description: Fetches a Feature object for an application.
      operationId: getFeatureForApplication
      parameters:
        - in: path
          name: appId
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationFeature'
        '404':
          description: Not Found
      security:
        - api_token: []
        - oauth2:
            - okta.apps.read
      tags:
        - Application
    put:
      summary: Updates a Feature object for an application.
      description: Updates a Feature object for an application.
      operationId: updateFeatureForApplication
      parameters:
        - in: path
          name: appId
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CapabilitiesObject'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationFeature'
        '404':
          description: Not Found
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
  /api/v1/apps/{appId}/grants:
    get:
      summary: List Scope Consent Grants for Application
      description: Lists all scope consent grants for the application
      operationId: listScopeConsentGrants
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuth2ScopeConsentGrant'
      security:
        - api_token: []
      tags:
        - Application
    post:
      summary: Grant Consent to Scope for Application
      description: Grants consent for the application to request an OAuth 2.0 Okta scope
      operationId: grantConsentToScope
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: oAuth2ScopeConsentGrant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2ScopeConsentGrant'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2ScopeConsentGrant'
      security:
        - api_token: []
      tags:
        - Application
  /api/v1/apps/{appId}/grants/{grantId}:
    get:
      summary: Get Scope Consent Grant for Application
      description: Fetches a single scope consent grant for the application
      operationId: getScopeConsentGrant
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: grantId
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2ScopeConsentGrant'
      security:
        - api_token: []
      tags:
        - Application
    delete:
      summary: Revoke Scope Consent Grant for Application
      description: Revokes permission for the application to request the given scope
      operationId: revokeScopeConsentGrant
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: grantId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
      tags:
        - Application
  /api/v1/apps/{appId}/groups:
    get:
      summary: List Groups Assigned to Application
      description: Enumerates group assignments for an application.
      operationId: listApplicationGroupAssignments
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: q
          in: query
          schema:
            type: string
        - name: after
          in: query
          description: Specifies the pagination cursor for the next page of assignments
          schema:
            type: string
        - name: limit
          in: query
          description: Specifies the number of results for a page
          schema:
            type: integer
            format: int32
            default: -1
        - name: expand
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationGroupAssignment'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.read
      tags:
        - Application
  /api/v1/apps/{appId}/groups/{groupId}:
    get:
      summary: Get Assigned Group for Application
      description: Fetches an application group assignment
      operationId: getApplicationGroupAssignment
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationGroupAssignment'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.read
      tags:
        - Application
    put:
      summary: Assign Group to Application
      description: Assigns a group to an application
      operationId: createApplicationGroupAssignment
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: applicationGroupAssignment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationGroupAssignment'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationGroupAssignment'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
    delete:
      summary: Remove Group from Application
      description: Removes a group assignment from an application.
      operationId: deleteApplicationGroupAssignment
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
  /api/v1/apps/{appId}/lifecycle/activate:
    post:
      summary: Activate Application
      description: Activates an inactive application.
      operationId: activateApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
  /api/v1/apps/{appId}/lifecycle/deactivate:
    post:
      summary: Deactivate Application
      description: Deactivates an active application.
      operationId: deactivateApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
  /api/v1/apps/{appId}/tokens:
    get:
      summary: Lists OAuth 2.0 Tokens for Application
      description: Lists all tokens for the application
      operationId: listOAuth2TokensForApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
        - name: after
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuth2Token'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.read
      tags:
        - Application
    delete:
      summary: Revoke All OAuth 2.0 Tokens for Application
      description: Revokes all tokens for the specified application
      operationId: revokeOAuth2TokensForApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
  /api/v1/apps/{appId}/tokens/{tokenId}:
    get:
      summary: Get OAuth 2.0 Token for Application
      description: Gets a token for the specified application
      operationId: getOAuth2TokenForApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: tokenId
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Token'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.read
      tags:
        - Application
    delete:
      summary: Revoke an OAuth 2.0 Token for Application
      description: Revokes the specified token for the specified application
      operationId: revokeOAuth2TokenForApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: tokenId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
  /api/v1/apps/{appId}/users:
    get:
      summary: List Users Assigned to Application
      description: Enumerates all assigned [application users](#application-user-model) for an application.
      operationId: listApplicationUsers
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: q
          in: query
          schema:
            type: string
        - name: query_scope
          in: query
          schema:
            type: string
        - name: after
          in: query
          description: specifies the pagination cursor for the next page of assignments
          schema:
            type: string
        - name: limit
          in: query
          description: specifies the number of results for a page
          schema:
            type: integer
            format: int32
            default: -1
        - name: filter
          in: query
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppUser'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.read
      tags:
        - Application
    post:
      summary: Assign User to Application for SSO & Provisioning
      description: Assigns an user to an application with [credentials](#application-user-credentials-object) and an app-specific [profile](#application-user-profile-object). Profile mappings defined for the application are first applied before applying any profile properties specified in the request.
      operationId: assignUserToApplication
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: appUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppUser'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
  /api/v1/apps/{appId}/users/{userId}:
    get:
      summary: Get Assigned User for Application
      description: Fetches a specific user assignment for application by `id`.
      operationId: getApplicationUser
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.read
      tags:
        - Application
    post:
      summary: Update Application Profile for Assigned User
      description: Updates a user's profile for an application
      operationId: updateApplicationUser
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: appUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppUser'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
    delete:
      summary: Remove User from Application
      description: Removes an assignment for a user from an application.
      operationId: deleteApplicationUser
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: sendEmail
          in: query
          schema:
            type: boolean
            default: false
          x-okta-added-version: 1.5.0
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - Application
  /api/v1/authenticators:
    get:
      summary: List Authenticators
      description: Enumerates authenticators in your organization.
      operationId: listAuthenticators
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Authenticator'
                type: array
      security:
        - api_token: []
        - oauth2:
            - okta.authenticators.read
      tags:
        - Authenticator
  /api/v1/authenticators/{authenticatorId}:
    get:
      summary: Get Authenticator
      description: Fetches an authenticator from your Okta organization by `authenticatorId`.
      operationId: getAuthenticator
      parameters:
        - in: path
          name: authenticatorId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authenticator'
      security:
        - api_token: []
        - oauth2:
            - okta.authenticators.read
      tags:
        - Authenticator
    put:
      summary: Update Authenticator
      description: Updates an authenticator
      operationId: updateAuthenticator
      parameters:
        - in: path
          name: authenticatorId
          required: true
          schema:
            type: string
      x-codegen-request-body-name: authenticator
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authenticator'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authenticator'
      security:
        - api_token: []
        - oauth2:
            - okta.authenticators.manage
      tags:
        - Authenticator
  /api/v1/authenticators/{authenticatorId}/lifecycle/activate:
    post:
      summary: Activate Authenticator
      description: Activates an authenticator by `authenticatorId`.
      operationId: activateAuthenticator
      parameters:
        - in: path
          name: authenticatorId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authenticator'
      security:
        - api_token: []
        - oauth2:
            - okta.authenticators.manage
      tags:
        - Authenticator
  /api/v1/authenticators/{authenticatorId}/lifecycle/deactivate:
    post:
      summary: Deactivate Authenticator
      description: Deactivates an authenticator by `authenticatorId`.
      operationId: deactivateAuthenticator
      parameters:
        - in: path
          name: authenticatorId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authenticator'
      security:
        - api_token: []
        - oauth2:
            - okta.authenticators.manage
      tags:
        - Authenticator
  /api/v1/authorizationServers:
    get:
      summary: List Authorization Servers
      description: Success
      operationId: listAuthorizationServers
      parameters:
        - name: q
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: string
        - name: after
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorizationServer'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServer
    post:
      summary: Create Authorization Server
      description: Success
      operationId: createAuthorizationServer
      x-codegen-request-body-name: authorizationServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServer'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServer'
        '201':
          description: Created
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}:
    get:
      summary: Get Authorization Server
      description: Success
      operationId: getAuthorizationServer
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServer'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServer
    put:
      summary: Update Authorization Server
      description: Success
      operationId: updateAuthorizationServer
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: authorizationServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServer'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServer'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
    delete:
      summary: Delete Authorization Server
      description: Success
      operationId: deleteAuthorizationServer
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/claims:
    get:
      summary: List Custom OAuth 2.0 Token Claims
      description: Success
      operationId: listOAuth2Claims
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuth2Claim'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServer
    post:
      summary: Create Custom OAuth 2.0 Token Claim
      description: Success
      operationId: createOAuth2Claim
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: oAuth2Claim
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2Claim'
        required: true
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Claim'
        '201':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/claims/{claimId}:
    get:
      summary: Get Oauth2claim
      description: Success
      operationId: getOAuth2Claim
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: claimId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Claim'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServer
    put:
      summary: Update Custom OAuth 2.0 Token Claim
      description: Success
      operationId: updateOAuth2Claim
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: claimId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: oAuth2Claim
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2Claim'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Claim'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
    delete:
      summary: Delete Custom OAuth 2.0 Token Claim
      description: Success
      operationId: deleteOAuth2Claim
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: claimId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/clients:
    get:
      summary: List Oauth2clients for Authorization Server
      description: Success
      operationId: listOAuth2ClientsForAuthorizationServer
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuth2Client'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens:
    get:
      summary: List Refresh Tokens for Authorization Server and Client
      description: Success
      operationId: listRefreshTokensForAuthorizationServerAndClient
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: clientId
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
        - name: after
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: -1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuth2RefreshToken'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServer
    delete:
      summary: Revoke Refresh Tokens for Authorization Server and Client
      description: Success
      operationId: revokeRefreshTokensForAuthorizationServerAndClient
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: clientId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}:
    get:
      summary: Get Refresh Token for Authorization Server and Client
      description: Success
      operationId: getRefreshTokenForAuthorizationServerAndClient
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: clientId
          in: path
          required: true
          schema:
            type: string
        - name: tokenId
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2RefreshToken'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServer
    delete:
      summary: Revoke Refresh Token for Authorization Server and Client
      description: Success
      operationId: revokeRefreshTokenForAuthorizationServerAndClient
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: clientId
          in: path
          required: true
          schema:
            type: string
        - name: tokenId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/credentials/keys:
    get:
      summary: List Authorization Server Keys
      description: Success
      operationId: listAuthorizationServerKeys
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JsonWebKey'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/credentials/lifecycle/keyRotate:
    post:
      summary: Rotate Authorization Server Keys
      description: Success
      operationId: rotateAuthorizationServerKeys
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: use
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwkUse'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JsonWebKey'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/lifecycle/activate:
    post:
      summary: Activate Authorization Server
      description: Success
      operationId: activateAuthorizationServer
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/lifecycle/deactivate:
    post:
      summary: Deactivate Authorization Server
      description: Success
      operationId: deactivateAuthorizationServer
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/policies:
    get:
      summary: List Authorization Server Policies
      description: Success
      operationId: listAuthorizationServerPolicies
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorizationServerPolicy'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServer
    post:
      summary: Create Authorization Server Policy
      description: Success
      operationId: createAuthorizationServerPolicy
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: policy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServerPolicy'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerPolicy'
        '201':
          description: Created
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}:
    get:
      summary: Get Authorization Server Policy
      description: Success
      operationId: getAuthorizationServerPolicy
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: policyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerPolicy'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServer
    put:
      summary: Update Authorization Server Policy
      description: Success
      operationId: updateAuthorizationServerPolicy
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: policyId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: policy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServerPolicy'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerPolicy'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
    delete:
      summary: Delete Authorization Server Policy
      description: Success
      operationId: deleteAuthorizationServerPolicy
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: policyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/activate:
    post:
      summary: Activate Authorization Server Policy
      description: Activate Authorization Server Policy
      operationId: activateAuthorizationServerPolicy
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: policyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/deactivate:
    post:
      summary: Deactivate Authorization Server Policy
      description: Deactivate Authorization Server Policy
      operationId: deactivateAuthorizationServerPolicy
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: policyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules:
    get:
      summary: List Authorization Server Policy Rules
      description: Enumerates all policy rules for the specified Custom Authorization Server and Policy.
      operationId: listAuthorizationServerPolicyRules
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorizationServerPolicyRule'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServer
    post:
      summary: Create Authorization Server Policy Rule
      description: Creates a policy rule for the specified Custom Authorization Server and Policy.
      operationId: createAuthorizationServerPolicyRule
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: policyRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServerPolicyRule'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerPolicyRule'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}:
    get:
      summary: Get Authorization Server Policy Rule
      description: Returns a Policy Rule by ID that is defined in the specified Custom Authorization Server and Policy.
      operationId: getAuthorizationServerPolicyRule
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerPolicyRule'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServer
    put:
      summary: Update Authorization Server Policy Rule
      description: Updates the configuration of the Policy Rule defined in the specified Custom Authorization Server and Policy.
      operationId: updateAuthorizationServerPolicyRule
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: policyRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServerPolicyRule'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerPolicyRule'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
    delete:
      summary: Delete Authorization Server Policy Rule
      description: Deletes a Policy Rule defined in the specified Custom Authorization Server and Policy.
      operationId: deleteAuthorizationServerPolicyRule
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/activate:
    post:
      summary: Activate Authorization Server Policy Rule
      description: Activate Authorization Server Policy Rule
      operationId: activateAuthorizationServerPolicyRule
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: policyId
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate:
    post:
      summary: Deactivate Authorization Server Policy Rule
      description: Deactivate Authorization Server Policy Rule
      operationId: deactivateAuthorizationServerPolicyRule
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: policyId
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/scopes:
    get:
      summary: List Oauth2scopes
      description: Success
      operationId: listOAuth2Scopes
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: q
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
        - name: cursor
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: -1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuth2Scope'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServer
    post:
      summary: Create Oauth2scope
      description: Success
      operationId: createOAuth2Scope
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: oAuth2Scope
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2Scope'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Scope'
        '201':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
  /api/v1/authorizationServers/{authServerId}/scopes/{scopeId}:
    get:
      summary: Get Oauth2scope
      description: Success
      operationId: getOAuth2Scope
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: scopeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Scope'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServer
    put:
      summary: Update Oauth2scope
      description: Success
      operationId: updateOAuth2Scope
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: scopeId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: oAuth2Scope
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2Scope'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Scope'
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
    delete:
      summary: Delete Oauth2scope
      description: Success
      operationId: deleteOAuth2Scope
      parameters:
        - name: authServerId
          in: path
          required: true
          schema:
            type: string
        - name: scopeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
  /api/v1/brands:
    get:
      summary: List Brands
      description: List all the brands in your org.
      operationId: listBrands
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Brand'
      security:
        - api_token: []
        - oauth2:
            - okta.brands.read
      tags:
        - Brand
  /api/v1/brands/{brandId}:
    parameters:
      - in: path
        name: brandId
        required: true
        schema:
          type: string
    get:
      summary: Get Brand
      description: Fetches a brand by `brandId`
      operationId: getBrand
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Brand'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_token: []
        - oauth2:
            - okta.brands.read
      tags:
        - Brand
    put:
      summary: Update Brand
      description: Updates a brand by `brandId`
      operationId: updateBrand
      x-codegen-request-body-name: brand
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Brand'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Brand'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_token: []
        - oauth2:
            - okta.brands.manage
      tags:
        - Brand
  /api/v1/brands/{brandId}/themes:
    parameters:
      - in: path
        name: brandId
        required: true
        schema:
          type: string
    get:
      summary: Get Brand Themes
      description: List all the themes in your brand
      operationId: listBrandThemes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ThemeResponse'
      security:
        - api_token: []
        - oauth2:
            - okta.brands.read
      tags:
        - Brand
  /api/v1/brands/{brandId}/themes/{themeId}:
    parameters:
      - in: path
        name: brandId
        required: true
        schema:
          type: string
      - in: path
        name: themeId
        required: true
        schema:
          type: string
    get:
      summary: Get a theme for a brand
      description: Fetches a theme for a brand
      operationId: getBrandTheme
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeResponse'
      security:
        - api_token: []
        - oauth2:
            - okta.brands.read
      tags:
        - Brand
    put:
      summary: Update a theme for a brand
      description: Updates a theme for a brand
      operationId: updateBrandTheme
      x-codegen-request-body-name: theme
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Theme'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_token: []
        - oauth2:
            - okta.brands.manage
      tags:
        - Brand
  /api/v1/brands/{brandId}/themes/{themeId}/background-image:
    parameters:
      - in: path
        name: brandId
        required: true
        schema:
          type: string
      - in: path
        name: themeId
        required: true
        schema:
          type: string
    post:
      summary: Updates the background image for your Theme
      description: Updates the background image for your Theme
      operationId: uploadBrandThemeBackgroundImage
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              description: The file must be in PNG, JPG, or GIF format and less than 2 MB in size.
        description: background image file
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageUploadResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_token: []
        - oauth2:
            - okta.brands.manage
      tags:
        - Brand
    delete:
      summary: Deletes a Theme background image
      description: Deletes a Theme background image
      operationId: deleteBrandThemeBackgroundImage
      responses:
        '204':
          description: No Content
          content: {}
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_token: []
        - oauth2:
            - okta.brands.manage
      tags:
        - Brand
  /api/v1/brands/{brandId}/themes/{themeId}/favicon:
    parameters:
      - in: path
        name: brandId
        required: true
        schema:
          type: string
      - in: path
        name: themeId
        required: true
        schema:
          type: string
    post:
      summary: Updates the favicon for your theme
      description: Updates the favicon for your theme
      operationId: uploadBrandThemeFavicon
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              description: The file must be in PNG, or ico format and less than ?? in size and 128 x 128 dimensions
        description: favicon file
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageUploadResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_token: []
        - oauth2:
            - okta.brands.manage
      tags:
        - Brand
    delete:
      summary: Deletes a Theme favicon. The org then uses the Okta default favicon.
      description: Deletes a Theme favicon. The org then uses the Okta default favicon.
      operationId: deleteBrandThemeFavicon
      responses:
        '204':
          description: No Content
          content: {}
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_token: []
        - oauth2:
            - okta.brands.manage
      tags:
        - Brand
  /api/v1/brands/{brandId}/themes/{themeId}/logo:
    parameters:
      - in: path
        name: brandId
        required: true
        schema:
          type: string
      - in: path
        name: themeId
        required: true
        schema:
          type: string
    post:
      summary: Update a themes logo
      description: Updates the logo for your Theme
      operationId: uploadBrandThemeLogo
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: The file must be in PNG, JPG, or GIF format and less than 100kB in size. For best results use landscape orientation, a transparent background, and a minimum size of 300px by 50px to prevent upscaling.
              type: object
        description: logo file
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageUploadResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_token: []
        - oauth2:
            - okta.brands.manage
      tags:
        - Brand
    delete:
      summary: Deletes a Theme logo. The org then uses the Okta default logo.
      description: Deletes a Theme logo. The org then uses the Okta default logo.
      operationId: deleteBrandThemeLogo
      responses:
        '204':
          description: No Content
          content: {}
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_token: []
        - oauth2:
            - okta.brands.manage
      tags:
        - Brand
  /api/v1/captchas:
    get:
      summary: List CAPTCHA instances
      description: Enumerates CAPTCHA instances in your organization with pagination. A subset of CAPTCHA instances can be returned that match a supported filter expression or query.
      operationId: listCaptchaInstances
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CAPTCHAInstance'
      security:
        - api_token: []
        - oauth2:
            - okta.captchas.read
      tags:
        - CAPTCHA
    post:
      summary: Create new CAPTCHA instance
      description: Adds a new CAPTCHA instance to your organization. In the current release, we only allow one CAPTCHA instance per org.
      operationId: createCaptchaInstance
      x-codegen-request-body-name: instance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CAPTCHAInstance'
            examples:
              HCaptcha:
                $ref: '#/components/examples/CAPTCHAInstanceRequestHCaptcha'
              ReCaptcha:
                $ref: '#/components/examples/CAPTCHAInstanceRequestReCaptcha'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CAPTCHAInstance'
              examples:
                HCaptcha:
                  $ref: '#/components/examples/CAPTCHAInstanceResponseHCaptcha'
                ReCaptcha:
                  $ref: '#/components/examples/CAPTCHAInstanceResponseReCaptcha'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Error Limit of One CAPTCHA instance per org:
                  $ref: '#/components/examples/ErrorCAPTCHALimitOfOne'
      security:
        - api_token: []
        - oauth2:
            - okta.captchas.manage
      tags:
        - CAPTCHA
  /api/v1/captchas/{captchaId}:
    parameters:
      - $ref: '#/components/parameters/pathCaptchaId'
    get:
      summary: Get CAPTCHA Instance
      description: Fetches a CAPTCHA instance by `id`.
      operationId: getCaptchaInstance
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CAPTCHAInstance'
              examples:
                HCaptcha:
                  $ref: '#/components/examples/CAPTCHAInstanceResponseHCaptcha'
                ReCaptcha:
                  $ref: '#/components/examples/CAPTCHAInstanceResponseReCaptcha'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
      security:
        - api_token: []
        - oauth2:
            - okta.captchas.read
      tags:
        - CAPTCHA
    post:
      summary: Partial Update CAPTCHA instance
      description: Partially update a CAPTCHA instance by `id`.
      operationId: partialUpdateCaptchaInstance
      x-codegen-request-body-name: instance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CAPTCHAInstance'
            examples:
              HCaptcha:
                $ref: '#/components/examples/CAPTCHAInstanceRequestHCaptcha'
              ReCaptcha:
                $ref: '#/components/examples/CAPTCHAInstanceRequestReCaptcha'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CAPTCHAInstance'
              examples:
                HCaptcha:
                  $ref: '#/components/examples/CAPTCHAInstanceResponseHCaptcha'
                ReCaptcha:
                  $ref: '#/components/examples/CAPTCHAInstanceResponseReCaptcha'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
      security:
        - api_token: []
        - oauth2:
            - okta.captchas.manage
      tags:
        - CAPTCHA
    put:
      summary: Update CAPTCHA instance
      description: Update a CAPTCHA instance by `id`.
      operationId: updateCaptchaInstance
      x-codegen-request-body-name: instance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CAPTCHAInstance'
            examples:
              HCaptcha:
                $ref: '#/components/examples/CAPTCHAInstanceRequestHCaptcha'
              ReCaptcha:
                $ref: '#/components/examples/CAPTCHAInstanceRequestReCaptcha'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CAPTCHAInstance'
              examples:
                HCaptcha:
                  $ref: '#/components/examples/CAPTCHAInstanceResponseHCaptcha'
                ReCaptcha:
                  $ref: '#/components/examples/CAPTCHAInstanceResponseReCaptcha'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                API Validation Failed:
                  $ref: '#/components/examples/ErrorApiValidationFailed'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
      security:
        - api_token: []
        - oauth2:
            - okta.captchas.manage
      tags:
        - CAPTCHA
    delete:
      summary: Delete CAPTCHA Instance
      description: Delete a CAPTCHA instance by `id`. If the CAPTCHA instance is currently being used in the org, the delete will not be allowed.
      operationId: deleteCaptchaInstance
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Cannot remove CAPTCHA in use:
                  $ref: '#/components/examples/ErrorCAPTCHAOrgWideSetting'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Resource Not Found:
                  $ref: '#/components/examples/ErrorResourceNotFound'
      security:
        - api_token: []
        - oauth2:
            - okta.captchas.manage
      tags:
        - CAPTCHA
  /api/v1/domains:
    get:
      summary: List Domains
      description: List all verified custom Domains for the org.
      operationId: listDomains
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainListResponse'
      security:
        - api_token: []
        - oauth2:
            - okta.domains.read
      tags:
        - Domain
    post:
      summary: Create Domain
      description: Creates your domain.
      operationId: createDomain
      x-codegen-request-body-name: domain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domain'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
      security:
        - api_token: []
        - oauth2:
            - okta.domains.manage
      tags:
        - Domain
  /api/v1/domains/{domainId}:
    get:
      summary: Get Domain
      description: Fetches a Domain by `id`.
      operationId: getDomain
      parameters:
        - name: domainId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
      security:
        - api_token: []
        - oauth2:
            - okta.domains.read
      tags:
        - Domain
    delete:
      summary: Delete Domain
      description: Deletes a Domain by `id`.
      operationId: deleteDomain
      parameters:
        - name: domainId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.domains.manage
      tags:
        - Domain
  /api/v1/domains/{domainId}/certificate:
    put:
      summary: Create Certificate
      description: Creates the Certificate for the Domain.
      operationId: createCertificate
      parameters:
        - name: domainId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: certificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainCertificate'
        required: true
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.domains.manage
      tags:
        - Domain
  /api/v1/domains/{domainId}/verify:
    post:
      summary: Verify Domain
      description: Verifies the Domain by `id`.
      operationId: verifyDomain
      parameters:
        - name: domainId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
      security:
        - api_token: []
        - oauth2:
            - okta.domains.manage
      tags:
        - Domain
  /api/v1/eventHooks:
    get:
      summary: List Event Hooks
      description: Success
      operationId: listEventHooks
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventHook'
      security:
        - api_token: []
        - oauth2:
            - okta.eventHooks.read
      tags:
        - EventHook
    post:
      summary: Create Event Hook
      description: Success
      operationId: createEventHook
      x-codegen-request-body-name: eventHook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventHook'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventHook'
      security:
        - api_token: []
        - oauth2:
            - okta.eventHooks.manage
      tags:
        - EventHook
  /api/v1/eventHooks/{eventHookId}:
    get:
      summary: Get Event Hook
      description: Success
      operationId: getEventHook
      parameters:
        - name: eventHookId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventHook'
      security:
        - api_token: []
        - oauth2:
            - okta.eventHooks.read
      tags:
        - EventHook
    put:
      summary: Update Event Hook
      description: Success
      operationId: updateEventHook
      parameters:
        - name: eventHookId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: eventHook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventHook'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventHook'
      security:
        - api_token: []
        - oauth2:
            - okta.eventHooks.manage
      tags:
        - EventHook
    delete:
      summary: Delete Event Hook
      description: Success
      operationId: deleteEventHook
      parameters:
        - name: eventHookId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.eventHooks.manage
      tags:
        - EventHook
  /api/v1/eventHooks/{eventHookId}/lifecycle/activate:
    post:
      summary: Activate Event Hook
      description: Success
      operationId: activateEventHook
      parameters:
        - name: eventHookId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventHook'
      security:
        - api_token: []
        - oauth2:
            - okta.eventHooks.manage
      tags:
        - EventHook
  /api/v1/eventHooks/{eventHookId}/lifecycle/deactivate:
    post:
      summary: Deactivate Event Hook
      description: Success
      operationId: deactivateEventHook
      parameters:
        - name: eventHookId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventHook'
      security:
        - api_token: []
        - oauth2:
            - okta.eventHooks.manage
      tags:
        - EventHook
  /api/v1/eventHooks/{eventHookId}/lifecycle/verify:
    post:
      summary: Verify Event Hook
      description: Success
      operationId: verifyEventHook
      parameters:
        - name: eventHookId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventHook'
      security:
        - api_token: []
        - oauth2:
            - okta.eventHooks.manage
      tags:
        - EventHook
  /api/v1/features:
    get:
      summary: List Features
      description: Success
      operationId: listFeatures
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feature'
      security:
        - api_token: []
      tags:
        - Feature
  /api/v1/features/{featureId}:
    get:
      summary: Get Feature
      description: Success
      operationId: getFeature
      parameters:
        - name: featureId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
      security:
        - api_token: []
      tags:
        - Feature
  /api/v1/features/{featureId}/dependencies:
    get:
      summary: List Feature Dependencies
      description: Success
      operationId: listFeatureDependencies
      parameters:
        - name: featureId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feature'
      security:
        - api_token: []
      tags:
        - Feature
  /api/v1/features/{featureId}/dependents:
    get:
      summary: List Feature Dependents
      description: Success
      operationId: listFeatureDependents
      parameters:
        - name: featureId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feature'
      security:
        - api_token: []
      tags:
        - Feature
  /api/v1/features/{featureId}/{lifecycle}:
    post:
      summary: Update Feature Lifecycle
      description: Success
      operationId: updateFeatureLifecycle
      parameters:
        - name: featureId
          in: path
          required: true
          schema:
            type: string
        - name: lifecycle
          in: path
          required: true
          schema:
            type: string
        - name: mode
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature'
      security:
        - api_token: []
      tags:
        - Feature
  /api/v1/groups:
    get:
      summary: List Groups
      description: Enumerates groups in your organization with pagination. A subset of groups can be returned that match a supported filter expression or query.
      operationId: listGroups
      parameters:
        - name: q
          in: query
          description: Searches the name property of groups for matching value
          schema:
            type: string
        - name: search
          in: query
          description: Filter expression for groups
          schema:
            type: string
        - name: after
          in: query
          description: Specifies the pagination cursor for the next page of groups
          schema:
            type: string
        - name: limit
          in: query
          description: Specifies the number of group results in a page
          schema:
            type: integer
            format: int32
            default: 10000
        - name: expand
          in: query
          description: If specified, it causes additional metadata to be included in the response.
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
      security:
        - api_token: []
        - oauth2:
            - okta.groups.read
      tags:
        - Group
    post:
      summary: Add Group
      description: Adds a new group with `OKTA_GROUP` type to your organization.
      operationId: createGroup
      x-codegen-request-body-name: group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      security:
        - api_token: []
        - oauth2:
            - okta.groups.manage
      tags:
        - Group
  /api/v1/groups/rules:
    get:
      summary: List Group Rules
      description: Lists all group rules for your organization.
      operationId: listGroupRules
      parameters:
        - name: limit
          in: query
          description: Specifies the number of rule results in a page
          schema:
            type: integer
            format: int32
            default: 50
        - name: after
          in: query
          description: Specifies the pagination cursor for the next page of rules
          schema:
            type: string
        - name: search
          in: query
          description: Specifies the keyword to search fules for
          schema:
            type: string
        - name: expand
          in: query
          description: If specified as `groupIdToGroupNameMap`, then show group names
          schema:
            type: string
          x-okta-added-version: 1.3.0
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupRule'
      security:
        - api_token: []
        - oauth2:
            - okta.groups.read
      tags:
        - Group
    post:
      summary: Create Group Rule
      description: Creates a group rule to dynamically add users to the specified group if they match the condition
      operationId: createGroupRule
      x-codegen-request-body-name: groupRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRule'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupRule'
      security:
        - api_token: []
        - oauth2:
            - okta.groups.manage
      tags:
        - Group
  /api/v1/groups/rules/{ruleId}:
    get:
      summary: Get Group Rule
      description: Fetches a specific group rule by id from your organization
      operationId: getGroupRule
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupRule'
      security:
        - api_token: []
        - oauth2:
            - okta.groups.read
      tags:
        - Group
    put:
      summary: Update Group Rule
      description: Updates a group rule. Only `INACTIVE` rules can be updated.
      operationId: updateGroupRule
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: groupRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRule'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupRule'
      security:
        - api_token: []
        - oauth2:
            - okta.groups.manage
      tags:
        - Group
    delete:
      summary: Delete a group Rule
      description: Removes a specific group rule by id from your organization
      operationId: deleteGroupRule
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
        - name: removeUsers
          in: query
          description: Indicates whether to keep or remove users from groups assigned by this rule.
          schema:
            type: boolean
      responses:
        '202':
          description: Accepted
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.groups.manage
      tags:
        - Group
  /api/v1/groups/rules/{ruleId}/lifecycle/activate:
    post:
      summary: Activate a group Rule
      description: Activates a specific group rule by id from your organization
      operationId: activateGroupRule
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.groups.manage
      tags:
        - Group
  /api/v1/groups/rules/{ruleId}/lifecycle/deactivate:
    post:
      summary: Deactivate a group Rule
      description: Deactivates a specific group rule by id from your organization
      operationId: deactivateGroupRule
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.groups.manage
      tags:
        - Group
  /api/v1/groups/{groupId}:
    get:
      summary: List Group Rules
      description: Fetches a group from your organization.
      operationId: getGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      security:
        - api_token: []
        - oauth2:
            - okta.groups.read
      tags:
        - Group
    put:
      summary: Update Group
      description: Updates the profile for a group with `OKTA_GROUP` type from your organization.
      operationId: updateGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      security:
        - api_token: []
        - oauth2:
            - okta.groups.manage
      tags:
        - Group
    delete:
      summary: Remove Group
      description: Removes a group with `OKTA_GROUP` type from your organization.
      operationId: deleteGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.groups.manage
      tags:
        - Group
  /api/v1/groups/{groupId}/apps:
    get:
      summary: List Assigned Applications
      description: Enumerates all applications that are assigned to a group.
      operationId: listAssignedApplicationsForGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: after
          in: query
          description: Specifies the pagination cursor for the next page of apps
          schema:
            type: string
        - name: limit
          in: query
          description: Specifies the number of app results for a page
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
      security:
        - api_token: []
        - oauth2:
            - okta.groups.read
      tags:
        - Group
  /api/v1/groups/{groupId}/roles:
    get:
      summary: List Group Assigned Roles
      description: Success
      operationId: listGroupAssignedRoles
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
      security:
        - api_token: []
        - oauth2:
            - okta.roles.read
      tags:
        - Group
    post:
      summary: Assign Role to Group
      description: Assigns a Role to a Group
      operationId: assignRoleToGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: disableNotifications
          in: query
          schema:
            type: boolean
      x-codegen-request-body-name: assignRoleRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignRoleRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '201':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.roles.manage
      tags:
        - Group
  /api/v1/groups/{groupId}/roles/{roleId}:
    get:
      summary: Get Role
      description: Success
      operationId: getRole
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      security:
        - api_token: []
        - oauth2:
            - okta.roles.read
      tags:
        - Group
    delete:
      summary: Remove Role from Group
      description: Unassigns a Role from a Group
      operationId: removeRoleFromGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.roles.manage
      tags:
        - Group
  /api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps:
    get:
      summary: List Application Targets for Application Administrator Role for Group
      description: Lists all App targets for an `APP_ADMIN` Role assigned to a Group. This methods return list may include full Applications or Instances. The response for an instance will have an `ID` value, while Application will not have an ID.
      operationId: listApplicationTargetsForApplicationAdministratorRoleForGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: after
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogApplication'
      security:
        - api_token: []
        - oauth2:
            - okta.roles.read
      tags:
        - Group
  /api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}:
    put:
      summary: Add Application Target to Admin Role Given to Group
      description: Success
      operationId: addApplicationTargetToAdminRoleGivenToGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: appName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.roles.manage
      tags:
        - Group
    delete:
      summary: Remove Application Target from Application Administrator Role Given to Group
      description: Success
      operationId: removeApplicationTargetFromApplicationAdministratorRoleGivenToGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: appName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.roles.manage
      tags:
        - Group
  /api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}:
    put:
      summary: Add App Instance Target to App Administrator Role given to a Group
      description: Add App Instance Target to App Administrator Role given to a Group
      operationId: addApplicationInstanceTargetToAppAdminRoleGivenToGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: appName
          in: path
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.roles.manage
      tags:
        - Group
    delete:
      summary: Remove App Instance Target to App Administrator Role given to a Group
      description: Remove App Instance Target to App Administrator Role given to a Group
      operationId: removeApplicationTargetFromAdministratorRoleGivenToGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: appName
          in: path
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.roles.manage
      tags:
        - Group
  /api/v1/groups/{groupId}/roles/{roleId}/targets/groups:
    get:
      summary: List Group Targets for Group Role
      description: Enumerates group targets for a group role.
      operationId: listGroupTargetsForGroupRole
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: after
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
      security:
        - api_token: []
        - oauth2:
            - okta.roles.read
      tags:
        - Group
  /api/v1/groups/{groupId}/roles/{roleId}/targets/groups/{targetGroupId}:
    put:
      summary: Add Group Target for Group Role
      description: Enumerates group targets for a group role.
      operationId: addGroupTargetToGroupAdministratorRoleForGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: targetGroupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - oauth2:
            - okta.roles.manage
      tags:
        - Group
    delete:
      summary: Delete Group Target for Group Role
      description: remove group target for a group role.
      operationId: removeGroupTargetFromGroupAdministratorRoleGivenToGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: targetGroupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - oauth2:
            - okta.roles.manage
      tags:
        - Group
  /api/v1/groups/{groupId}/users:
    get:
      summary: List Group Members
      description: Enumerates all users that are a member of a group.
      operationId: listGroupUsers
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: after
          in: query
          description: Specifies the pagination cursor for the next page of users
          schema:
            type: string
        - name: limit
          in: query
          description: Specifies the number of user results in a page
          schema:
            type: integer
            format: int32
            default: 1000
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - api_token: []
        - oauth2:
            - okta.groups.read
      tags:
        - Group
  /api/v1/groups/{groupId}/users/{userId}:
    put:
      summary: Add User to Group
      description: Adds a user to a group with 'OKTA_GROUP' type.
      operationId: addUserToGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.groups.manage
      tags:
        - Group
    delete:
      summary: Remove User from Group
      description: Removes a user from a group with 'OKTA_GROUP' type.
      operationId: removeUserFromGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.groups.manage
      tags:
        - Group
  /api/v1/idps:
    get:
      summary: List Identity Providers
      description: Enumerates IdPs in your organization with pagination. A subset of IdPs can be returned that match a supported filter expression or query.
      operationId: listIdentityProviders
      parameters:
        - name: q
          in: query
          description: Searches the name property of IdPs for matching value
          schema:
            type: string
        - name: after
          in: query
          description: Specifies the pagination cursor for the next page of IdPs
          schema:
            type: string
        - name: limit
          in: query
          description: Specifies the number of IdP results in a page
          schema:
            type: integer
            format: int32
            default: 20
        - name: type
          in: query
          description: Filters IdPs by type
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IdentityProvider'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.read
      tags:
        - IdentityProvider
    post:
      summary: Add Identity Provider
      description: Adds a new IdP to your organization.
      operationId: createIdentityProvider
      x-codegen-request-body-name: identityProvider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProvider'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProvider'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.manage
      tags:
        - IdentityProvider
  /api/v1/idps/credentials/keys:
    get:
      summary: List Identity Provider Keys
      description: Enumerates IdP key credentials.
      operationId: listIdentityProviderKeys
      parameters:
        - name: after
          in: query
          description: Specifies the pagination cursor for the next page of keys
          schema:
            type: string
        - name: limit
          in: query
          description: Specifies the number of key results in a page
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JsonWebKey'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.read
      tags:
        - IdentityProvider
    post:
      summary: Add X.509 Certificate Public Key for Identity Providers
      description: Adds a new X.509 certificate credential to the IdP key store.
      operationId: createIdentityProviderKey
      x-codegen-request-body-name: jsonWebKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonWebKey'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.manage
      tags:
        - IdentityProvider
  /api/v1/idps/credentials/keys/{keyId}:
    get:
      summary: Get Identity Provider Key
      description: Gets a specific IdP Key Credential by `kid`
      operationId: getIdentityProviderKey
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.read
      tags:
        - IdentityProvider
    delete:
      summary: Delete Key
      description: Deletes a specific IdP Key Credential by `kid` if it is not currently being used by an Active or Inactive IdP.
      operationId: deleteIdentityProviderKey
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.idps.manage
      tags:
        - IdentityProvider
  /api/v1/idps/{idpId}:
    get:
      summary: Get Identity Provider
      description: Fetches an IdP by `id`.
      operationId: getIdentityProvider
      parameters:
        - name: idpId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProvider'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.read
      tags:
        - IdentityProvider
    put:
      summary: Update Identity Provider
      description: Updates the configuration for an IdP.
      operationId: updateIdentityProvider
      parameters:
        - name: idpId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: identityProvider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProvider'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProvider'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.manage
      tags:
        - IdentityProvider
    delete:
      summary: Delete Identity Provider
      description: Removes an IdP from your organization.
      operationId: deleteIdentityProvider
      parameters:
        - name: idpId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.idps.manage
      tags:
        - IdentityProvider
  /api/v1/idps/{idpId}/credentials/csrs:
    get:
      summary: List Certificate Signing Requests for IdP
      description: Enumerates Certificate Signing Requests for an IdP
      operationId: listCsrsForIdentityProvider
      parameters:
        - name: idpId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Csr'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.read
      tags:
        - IdentityProvider
    post:
      summary: Generate Certificate Signing Request for IdP
      description: Generates a new key pair and returns a Certificate Signing Request for it.
      operationId: generateCsrForIdentityProvider
      parameters:
        - name: idpId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: metadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CsrMetadata'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Csr'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.manage
      tags:
        - IdentityProvider
  /api/v1/idps/{idpId}/credentials/csrs/{csrId}:
    get:
      summary: Get Csr for Identity Provider
      description: Gets a specific Certificate Signing Request model by id
      operationId: getCsrForIdentityProvider
      parameters:
        - name: idpId
          in: path
          required: true
          schema:
            type: string
        - name: csrId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Csr'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.read
      tags:
        - IdentityProvider
    delete:
      summary: Revoke Csr for Identity Provider
      description: Revoke a Certificate Signing Request and delete the key pair from the IdP
      operationId: revokeCsrForIdentityProvider
      parameters:
        - name: idpId
          in: path
          required: true
          schema:
            type: string
        - name: csrId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.idps.manage
      tags:
        - IdentityProvider
  /api/v1/idps/{idpId}/credentials/csrs/{csrId}/lifecycle/publish:
    post:
      summary: Publish Csr for Identity Provider
      description: Update the Certificate Signing Request with a signed X.509 certificate and add it into the signing key credentials for the IdP.
      operationId: publishCsrForIdentityProvider
      parameters:
        - name: idpId
          in: path
          required: true
          schema:
            type: string
        - name: csrId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
          application/x-x509-ca-cert:
            schema:
              type: string
              format: binary
              x-okta-operationId: publishBinaryCerCertForIdentityProvider
          application/pkix-cert:
            schema:
              type: string
              format: binary
              x-okta-operationId: publishBinaryDerCertForIdentityProvider
          application/x-pem-file:
            schema:
              type: string
              format: binary
              x-okta-operationId: publishBinaryPemCertForIdentityProvider
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.manage
      tags:
        - IdentityProvider
  /api/v1/idps/{idpId}/credentials/keys:
    get:
      summary: List Signing Key Credentials for IdP
      description: Enumerates signing key credentials for an IdP
      operationId: listIdentityProviderSigningKeys
      parameters:
        - name: idpId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JsonWebKey'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.read
      tags:
        - IdentityProvider
  /api/v1/idps/{idpId}/credentials/keys/generate:
    post:
      summary: Generate New IdP Signing Key Credential
      description: Generates a new X.509 certificate for an IdP signing key credential to be used for signing assertions sent to the IdP
      operationId: generateIdentityProviderSigningKey
      parameters:
        - name: idpId
          in: path
          required: true
          schema:
            type: string
        - name: validityYears
          in: query
          description: expiry of the IdP Key Credential
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.manage
      tags:
        - IdentityProvider
  /api/v1/idps/{idpId}/credentials/keys/{keyId}:
    get:
      summary: Get Signing Key Credential for IdP
      description: Gets a specific IdP Key Credential by `kid`
      operationId: getIdentityProviderSigningKey
      parameters:
        - name: idpId
          in: path
          required: true
          schema:
            type: string
        - name: keyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.read
      tags:
        - IdentityProvider
  /api/v1/idps/{idpId}/credentials/keys/{keyId}/clone:
    post:
      summary: Clone Signing Key Credential for IdP
      description: Clones a X.509 certificate for an IdP signing key credential from a source IdP to target IdP
      operationId: cloneIdentityProviderKey
      parameters:
        - name: idpId
          in: path
          required: true
          schema:
            type: string
        - name: keyId
          in: path
          required: true
          schema:
            type: string
        - name: targetIdpId
          in: query
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonWebKey'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.manage
      tags:
        - IdentityProvider
  /api/v1/idps/{idpId}/lifecycle/activate:
    post:
      summary: Activate Identity Provider
      description: Activates an inactive IdP.
      operationId: activateIdentityProvider
      parameters:
        - name: idpId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProvider'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.manage
      tags:
        - IdentityProvider
  /api/v1/idps/{idpId}/lifecycle/deactivate:
    post:
      summary: Deactivate Identity Provider
      description: Deactivates an active IdP.
      operationId: deactivateIdentityProvider
      parameters:
        - name: idpId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProvider'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.manage
      tags:
        - IdentityProvider
  /api/v1/idps/{idpId}/users:
    get:
      summary: Find Users
      description: Find all the users linked to an identity provider
      operationId: listIdentityProviderApplicationUsers
      parameters:
        - name: idpId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IdentityProviderApplicationUser'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.read
      tags:
        - IdentityProvider
  /api/v1/idps/{idpId}/users/{userId}:
    get:
      summary: Get Identity Provider Application User
      description: Fetches a linked IdP user by ID
      operationId: getIdentityProviderApplicationUser
      parameters:
        - name: idpId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProviderApplicationUser'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.read
      tags:
        - IdentityProvider
    post:
      summary: Link a user to a Social IdP without a transaction
      description: Links an Okta user to an existing Social Identity Provider. This does not support the SAML2 Identity Provider Type
      operationId: linkUserToIdentityProvider
      parameters:
        - name: idpId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: userIdentityProviderLinkRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdentityProviderLinkRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProviderApplicationUser'
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - IdentityProvider
    delete:
      summary: Unlink User from IdP
      description: Removes the link between the Okta user and the IdP user.
      operationId: unlinkUserFromIdentityProvider
      parameters:
        - name: idpId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.idps.manage
      tags:
        - IdentityProvider
  /api/v1/idps/{idpId}/users/{userId}/credentials/tokens:
    get:
      summary: Social Authentication Token Operation
      description: Fetches the tokens minted by the Social Authentication Provider when the user authenticates with Okta via Social Auth.
      operationId: listSocialAuthTokens
      parameters:
        - name: idpId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SocialAuthToken'
      security:
        - api_token: []
        - oauth2:
            - okta.idps.read
      tags:
        - IdentityProvider
  /api/v1/inlineHooks:
    get:
      summary: List Inline Hooks
      description: Success
      operationId: listInlineHooks
      parameters:
        - name: type
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InlineHook'
      security:
        - api_token: []
        - oauth2:
            - okta.inlineHooks.read
      tags:
        - InlineHook
    post:
      summary: Create Inline Hook
      description: Success
      operationId: createInlineHook
      x-codegen-request-body-name: inlineHook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InlineHook'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineHook'
      security:
        - api_token: []
        - oauth2:
            - okta.inlineHooks.manage
      tags:
        - InlineHook
  /api/v1/inlineHooks/{inlineHookId}:
    get:
      summary: Get Inline Hook
      description: Gets an inline hook by ID
      operationId: getInlineHook
      parameters:
        - name: inlineHookId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineHook'
      security:
        - api_token: []
        - oauth2:
            - okta.inlineHooks.read
      tags:
        - InlineHook
    put:
      summary: Update Inline Hook
      description: Updates an inline hook by ID
      operationId: updateInlineHook
      parameters:
        - name: inlineHookId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: inlineHook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InlineHook'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineHook'
      security:
        - api_token: []
        - oauth2:
            - okta.inlineHooks.manage
      tags:
        - InlineHook
    delete:
      summary: Delete Inline Hook
      description: Deletes the Inline Hook matching the provided id. Once deleted, the Inline Hook is unrecoverable. As a safety precaution, only Inline Hooks with a status of INACTIVE are eligible for deletion.
      operationId: deleteInlineHook
      parameters:
        - name: inlineHookId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.inlineHooks.manage
      tags:
        - InlineHook
  /api/v1/inlineHooks/{inlineHookId}/execute:
    post:
      summary: Execute Inline Hook
      description: Executes the Inline Hook matching the provided inlineHookId using the request body as the input. This will send the provided data through the Channel and return a response if it matches the correct data contract. This execution endpoint should only be used for testing purposes.
      operationId: executeInlineHook
      parameters:
        - name: inlineHookId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: payloadData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InlineHookPayload'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineHookResponse'
      security:
        - api_token: []
        - oauth2:
            - okta.inlineHooks.manage
      tags:
        - InlineHook
  /api/v1/inlineHooks/{inlineHookId}/lifecycle/activate:
    post:
      summary: Activate Inline Hook
      description: Activates the Inline Hook matching the provided id
      operationId: activateInlineHook
      parameters:
        - name: inlineHookId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineHook'
      tags:
        - InlineHook
  /api/v1/inlineHooks/{inlineHookId}/lifecycle/deactivate:
    post:
      summary: Deactivate Inline Hook
      description: Deactivates the Inline Hook matching the provided id
      operationId: deactivateInlineHook
      parameters:
        - name: inlineHookId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineHook'
      tags:
        - InlineHook
  /api/v1/logs:
    get:
      summary: Fetch a list of events from your Okta organization system log.
      description: The Okta System Log API provides read access to your organization’s system log. This API provides more functionality than the Events API
      operationId: getLogs
      parameters:
        - name: since
          in: query
          schema:
            type: string
            format: date-time
        - name: until
          in: query
          schema:
            type: string
            format: date-time
        - name: filter
          in: query
          schema:
            type: string
        - name: q
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
        - name: sortOrder
          in: query
          schema:
            type: string
            default: ASCENDING
        - name: after
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogEvent'
      security:
        - api_token: []
        - oauth2:
            - okta.logs.read
      tags:
        - SystemLog
  /api/v1/mappings:
    get:
      summary: List Profile Mappings
      description: Enumerates Profile Mappings in your organization with pagination.
      operationId: listProfileMappings
      parameters:
        - name: after
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: -1
        - name: sourceId
          in: query
          schema:
            type: string
        - name: targetId
          in: query
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProfileMapping'
      security:
        - api_token: []
        - oauth2:
            - okta.profileMappings.read
      tags:
        - ProfileMapping
  /api/v1/mappings/{mappingId}:
    get:
      summary: Get Profile Mapping
      description: Fetches a single Profile Mapping referenced by its ID.
      operationId: getProfileMapping
      parameters:
        - name: mappingId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileMapping'
      security:
        - api_token: []
        - oauth2:
            - okta.profileMappings.read
      tags:
        - ProfileMapping
    post:
      summary: Update Profile Mapping
      description: Updates an existing Profile Mapping by adding, updating, or removing one or many Property Mappings.
      operationId: updateProfileMapping
      parameters:
        - name: mappingId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: profileMapping
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileMapping'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileMapping'
      security:
        - api_token: []
        - oauth2:
            - okta.profileMappings.manage
      tags:
        - ProfileMapping
  /api/v1/meta/schemas/apps/{appInstanceId}/default:
    get:
      summary: Fetches the Schema for an App User
      description: Fetches the Schema for an App User
      operationId: getApplicationUserSchema
      parameters:
        - name: appInstanceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchema'
      security:
        - api_token: []
        - oauth2:
            - okta.schemas.read
      tags:
        - Schema
    post:
      summary: Partial updates on the User Profile properties of the Application User Schema.
      description: Partial updates on the User Profile properties of the Application User Schema.
      operationId: updateApplicationUserProfile
      parameters:
        - name: appInstanceId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: body
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSchema'
        required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchema'
      security:
        - api_token: []
        - oauth2:
            - okta.schemas.manage
      tags:
        - Schema
  /api/v1/meta/schemas/group/default:
    get:
      summary: Fetches the group schema
      description: Fetches the group schema
      operationId: getGroupSchema
      parameters: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupSchema'
      security:
        - api_token: []
        - oauth2:
            - okta.schemas.read
      tags:
        - Schema
    post:
      summary: Updates, adds ore removes one or more custom Group Profile properties in the schema
      description: Updates, adds ore removes one or more custom Group Profile properties in the schema
      operationId: updateGroupSchema
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupSchema'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupSchema'
      security:
        - api_token: []
        - oauth2:
            - okta.schemas.manage
      tags:
        - Schema
  /api/v1/meta/schemas/user/linkedObjects:
    get:
      summary: List Linked Object Definitions
      description: Success
      operationId: listLinkedObjectDefinitions
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkedObject'
      security:
        - api_token: []
        - oauth2:
            - okta.linkedObjects.read
      tags:
        - LinkedObject
    post:
      summary: Add Linked Object Definition
      description: Success
      operationId: addLinkedObjectDefinition
      x-codegen-request-body-name: linkedObject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkedObject'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedObject'
      security:
        - api_token: []
        - oauth2:
            - okta.linkedObjects.manage
      tags:
        - LinkedObject
  /api/v1/meta/schemas/user/linkedObjects/{linkedObjectName}:
    get:
      summary: Get Linked Object Definition
      description: Success
      operationId: getLinkedObjectDefinition
      parameters:
        - name: linkedObjectName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedObject'
      security:
        - api_token: []
        - oauth2:
            - okta.linkedObjects.read
      tags:
        - LinkedObject
    delete:
      summary: Delete Linked Object Definition
      description: Success
      operationId: deleteLinkedObjectDefinition
      parameters:
        - name: linkedObjectName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.linkedObjects.manage
      tags:
        - LinkedObject
  /api/v1/meta/schemas/user/{schemaId}:
    get:
      summary: Fetches the schema for a Schema Id.
      description: Fetches the schema for a Schema Id.
      operationId: getUserSchema
      parameters:
        - name: schemaId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchema'
      security:
        - api_token: []
        - oauth2:
            - okta.schemas.read
      tags:
        - Schema
    post:
      summary: Update User Profile
      description: Partial updates on the User Profile properties of the user schema.
      operationId: updateUserProfile
      parameters:
        - name: schemaId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: userSchema
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSchema'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchema'
      security:
        - api_token: []
        - oauth2:
            - okta.schemas.manage
      tags:
        - Schema
  /api/v1/meta/types/user:
    get:
      summary: List User Types
      description: Fetches all User Types in your org
      operationId: listUserTypes
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserType'
      security:
        - api_token: []
        - oauth2:
            - okta.userTypes.read
      tags:
        - UserType
    post:
      summary: Create User Type
      description: Creates a new User Type. A default User Type is automatically created along with your org, and you may add another 9 User Types for a maximum of 10.
      operationId: createUserType
      x-codegen-request-body-name: userType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserType'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserType'
      security:
        - api_token: []
        - oauth2:
            - okta.userTypes.manage
      tags:
        - UserType
  /api/v1/meta/types/user/{typeId}:
    get:
      summary: Get User Type
      description: Fetches a User Type by ID. The special identifier `default` may be used to fetch the default User Type.
      operationId: getUserType
      parameters:
        - name: typeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserType'
      security:
        - api_token: []
        - oauth2:
            - okta.userTypes.read
      tags:
        - UserType
    post:
      summary: Update User Type
      description: Updates an existing User Type
      operationId: updateUserType
      parameters:
        - name: typeId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: userType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserType'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserType'
      security:
        - api_token: []
        - oauth2:
            - okta.userTypes.manage
      tags:
        - UserType
    put:
      summary: Replace User Type
      description: Replace an existing User Type
      operationId: replaceUserType
      parameters:
        - name: typeId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: userType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserType'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserType'
      security:
        - api_token: []
        - oauth2:
            - okta.userTypes.manage
      tags:
        - UserType
    delete:
      summary: Delete User Type
      description: Deletes a User Type permanently. This operation is not permitted for the default type, nor for any User Type that has existing users
      operationId: deleteUserType
      parameters:
        - name: typeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.userTypes.manage
      tags:
        - UserType
  /api/v1/org:
    get:
      summary: Get org settings
      description: Get settings of your organization.
      operationId: getOrgSettings
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSetting'
      security:
        - api_token: []
        - oauth2:
            - okta.orgs.read
      tags:
        - OrgSetting
    post:
      summary: Partial update Org Setting
      description: Partial update settings of your organization.
      operationId: partialUpdateOrgSetting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgSetting'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSetting'
      security:
        - api_token: []
        - oauth2:
            - okta.orgs.manage
      tags:
        - OrgSetting
    put:
      summary: Update Org setting
      description: Update settings of your organization.
      operationId: updateOrgSetting
      x-codegen-request-body-name: orgSetting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgSetting'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSetting'
      security:
        - api_token: []
        - oauth2:
            - okta.orgs.manage
      tags:
        - OrgSetting
  /api/v1/org/contacts:
    get:
      summary: Get org contact types
      description: Gets Contact Types of your organization.
      operationId: getOrgContactTypes
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OrgContactTypeObj'
                type: array
      security:
        - api_token: []
        - oauth2:
            - okta.orgs.read
      tags:
        - OrgSetting
  /api/v1/org/contacts/{contactType}:
    get:
      summary: Get org contact user
      description: Retrieves the URL of the User associated with the specified Contact Type.
      operationId: getOrgContactUser
      parameters:
        - in: path
          name: contactType
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgContactUser'
      security:
        - api_token: []
        - oauth2:
            - okta.orgs.read
      tags:
        - OrgSetting
    put:
      summary: Update org contact user
      description: Updates the User associated with the specified Contact Type.
      operationId: updateOrgContactUser
      parameters:
        - in: path
          name: contactType
          required: true
          schema:
            type: string
      x-codegen-request-body-name: orgContactUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgContactUser'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgContactUser'
      security:
        - api_token: []
        - oauth2:
            - okta.orgs.manage
      tags:
        - OrgSetting
  /api/v1/org/email/bounces/remove-list:
    post:
      summary: Remove Emails from Email Provider Bounce List
      description: A list of email addresses to be removed from the set of email addresses that are bounced.
      operationId: bulkRemoveEmailAddressBounces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BouncesRemoveListObj'
            examples:
              example-1:
                value:
                  emailAddresses:
                    - name@company.com
                    - unknown.email@okta.com
                    - name@okta@com
      responses:
        '200':
          description: Removes the provided list of emails from the set of email addresses that are bounced so that the provider resumes sending emails to those addresses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BouncesRemoveListResult'
              examples:
                example-1:
                  value:
                    errors:
                      - emailAddress: unknown.email@okta.com
                        reason: This email address does not belong to any user in your organization.
                      - emailAddress: name@okta@com
                        reason: Invalid email address. The provided email address failed validation against RFC 3696.
      security:
        - api_token: []
      tags:
        - OrgSetting
  /api/v1/org/logo:
    post:
      summary: Update org logo
      description: Updates the logo for your organization.
      operationId: updateOrgLogo
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: The file must be in PNG, JPG, or GIF format and less than 100kB in size. For best results use landscape orientation, a transparent background, and a minimum size of 300px by 50px to prevent upscaling.
              type: object
        description: logo file
      responses:
        '201':
          description: Created
      security:
        - api_token: []
        - oauth2:
            - okta.apps.manage
      tags:
        - OrgSetting
  /api/v1/org/preferences:
    get:
      summary: Get org preferences
      description: Gets preferences of your organization.
      operationId: getOrgPreferences
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgPreferences'
      security:
        - api_token: []
        - oauth2:
            - okta.orgs.read
      tags:
        - OrgSetting
  /api/v1/org/preferences/hideEndUserFooter:
    post:
      summary: Show Okta UI Footer
      description: Hide the Okta UI footer for all end users of your organization.
      operationId: hideOktaUIFooter
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgPreferences'
      security:
        - api_token: []
        - oauth2:
            - okta.orgs.manage
      tags:
        - OrgSetting
  /api/v1/org/preferences/showEndUserFooter:
    post:
      summary: Show Okta UI Footer
      description: Makes the Okta UI footer visible for all end users of your organization.
      operationId: showOktaUIFooter
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgPreferences'
      security:
        - api_token: []
        - oauth2:
            - okta.orgs.manage
      tags:
        - OrgSetting
  /api/v1/org/privacy/oktaCommunication:
    get:
      summary: Get Okta Communication Settings
      description: Gets Okta Communication Settings of your organization.
      operationId: getOktaCommunicationSettings
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgOktaCommunicationSetting'
      security:
        - api_token: []
        - oauth2:
            - okta.orgs.read
      tags:
        - OrgSetting
  /api/v1/org/privacy/oktaCommunication/optIn:
    post:
      summary: Opt in all users to Okta Communication emails
      description: Opts in all users of this org to Okta Communication emails.
      operationId: optInUsersToOktaCommunicationEmails
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgOktaCommunicationSetting'
      security:
        - api_token: []
        - oauth2:
            - okta.orgs.manage
      tags:
        - OrgSetting
  /api/v1/org/privacy/oktaCommunication/optOut:
    post:
      summary: Opt out all users from Okta Communication emails
      description: Opts out all users of this org from Okta Communication emails.
      operationId: optOutUsersFromOktaCommunicationEmails
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgOktaCommunicationSetting'
      security:
        - api_token: []
        - oauth2:
            - okta.orgs.manage
      tags:
        - OrgSetting
  /api/v1/org/privacy/oktaSupport:
    get:
      summary: Get Okta Support settings
      description: Gets Okta Support Settings of your organization.
      operationId: getOrgOktaSupportSettings
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgOktaSupportSettingsObj'
      security:
        - api_token: []
        - oauth2:
            - okta.orgs.read
      tags:
        - OrgSetting
  /api/v1/org/privacy/oktaSupport/extend:
    post:
      summary: Extend Okta Support
      description: Extends the length of time that Okta Support can access your org by 24 hours. This means that 24 hours are added to the remaining access time.
      operationId: extendOktaSupport
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgOktaSupportSettingsObj'
      security:
        - api_token: []
        - oauth2:
            - okta.orgs.manage
      tags:
        - OrgSetting
  /api/v1/org/privacy/oktaSupport/grant:
    post:
      summary: Grant Okta Support
      description: Enables you to temporarily allow Okta Support to access your org as an administrator for eight hours.
      operationId: grantOktaSupport
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgOktaSupportSettingsObj'
      security:
        - api_token: []
        - oauth2:
            - okta.orgs.manage
      tags:
        - OrgSetting
  /api/v1/org/privacy/oktaSupport/revoke:
    post:
      summary: Extend Okta Support
      description: Revokes Okta Support access to your organization.
      operationId: revokeOktaSupport
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgOktaSupportSettingsObj'
      security:
        - api_token: []
        - oauth2:
            - okta.orgs.manage
      tags:
        - OrgSetting
  /api/v1/policies:
    get:
      summary: List Policies
      description: Gets all policies with the specified type.
      operationId: listPolicies
      parameters:
        - name: type
          in: query
          required: true
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Policy'
      security:
        - api_token: []
        - oauth2:
            - okta.policies.read
      tags:
        - Policy
    post:
      summary: Create Policy
      description: Creates a policy.
      operationId: createPolicy
      parameters:
        - name: activate
          in: query
          schema:
            type: boolean
            default: true
      x-codegen-request-body-name: policy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      security:
        - api_token: []
        - oauth2:
            - okta.policies.manage
      tags:
        - Policy
  /api/v1/policies/{policyId}:
    get:
      summary: Get Policy
      description: Gets a policy.
      operationId: getPolicy
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      security:
        - api_token: []
        - oauth2:
            - okta.policies.read
      tags:
        - Policy
    put:
      summary: Update Policy
      description: Updates a policy.
      operationId: updatePolicy
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: policy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      security:
        - api_token: []
        - oauth2:
            - okta.policies.manage
      tags:
        - Policy
    delete:
      summary: Delete Policy
      description: Removes a policy.
      operationId: deletePolicy
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.policies.manage
      tags:
        - Policy
  /api/v1/policies/{policyId}/lifecycle/activate:
    post:
      summary: Activate Policy
      description: Activates a policy.
      operationId: activatePolicy
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.policies.manage
      tags:
        - Policy
  /api/v1/policies/{policyId}/lifecycle/deactivate:
    post:
      summary: Deactivate Policy
      description: Deactivates a policy.
      operationId: deactivatePolicy
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.policies.manage
      tags:
        - Policy
  /api/v1/policies/{policyId}/rules:
    get:
      summary: List Policy Rules
      description: Enumerates all policy rules.
      operationId: listPolicyRules
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyRule'
      security:
        - api_token: []
        - oauth2:
            - okta.policies.read
      tags:
        - Policy
    post:
      summary: Create Policy Rule
      description: Creates a policy rule.
      operationId: createPolicyRule
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: policyRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyRule'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyRule'
      security:
        - api_token: []
        - oauth2:
            - okta.policies.manage
      tags:
        - Policy
  /api/v1/policies/{policyId}/rules/{ruleId}:
    get:
      summary: Get Policy Rule
      description: Gets a policy rule.
      operationId: getPolicyRule
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyRule'
      security:
        - api_token: []
        - oauth2:
            - okta.policies.read
      tags:
        - Policy
    put:
      summary: Update Policy Rule
      description: Updates a policy rule.
      operationId: updatePolicyRule
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: policyRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyRule'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyRule'
      security:
        - api_token: []
        - oauth2:
            - okta.policies.manage
      tags:
        - Policy
    delete:
      summary: Delete Policy Rule
      description: Removes a policy rule.
      operationId: deletePolicyRule
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.policies.manage
      tags:
        - Policy
  /api/v1/policies/{policyId}/rules/{ruleId}/lifecycle/activate:
    post:
      summary: Activate Policy Rule
      description: Activates a policy rule.
      operationId: activatePolicyRule
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.policies.manage
      tags:
        - Policy
  /api/v1/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate:
    post:
      summary: Deactivate Policy Rule
      description: Deactivates a policy rule.
      operationId: deactivatePolicyRule
      parameters:
        - name: policyId
          in: path
          required: true
          schema:
            type: string
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.policies.manage
      tags:
        - Policy
  /api/v1/roles/{roleTypeOrRoleId}/subscriptions:
    get:
      summary: List all subscriptions of a Custom Role
      description: When roleType List all subscriptions of a Role. Else when roleId List subscriptions of a Custom Role
      operationId: listRoleSubscriptions
      parameters:
        - in: path
          name: roleTypeOrRoleId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Subscription'
                type: array
        '404':
          description: Not Found
      security:
        - api_token: []
        - oauth2:
            - okta.roles.read
      tags:
        - Subscription
  /api/v1/roles/{roleTypeOrRoleId}/subscriptions/{notificationType}:
    get:
      summary: Get subscriptions of a Custom Role with a specific notification type
      description: When roleType Get subscriptions of a Role with a specific notification type. Else when roleId Get subscription of a Custom Role with a specific notification type.
      operationId: getRoleSubscriptionByNotificationType
      parameters:
        - in: path
          name: roleTypeOrRoleId
          required: true
          schema:
            type: string
        - in: path
          name: notificationType
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '404':
          description: Not Found
      security:
        - api_token: []
        - oauth2:
            - okta.roles.read
      tags:
        - Subscription
  /api/v1/roles/{roleTypeOrRoleId}/subscriptions/{notificationType}/subscribe:
    post:
      summary: Subscribe a Custom Role to a specific notification type
      description: When roleType Subscribes a Role to a specific notification type. When you change the subscription status of a Role, it overrides the subscription of any individual user of that Role. Else when roleId Subscribes a Custom Role to a specific notification type. When you change the subscription status of a Custom Role, it overrides the subscription of any individual user of that Custom Role.
      operationId: subscribeRoleSubscriptionByNotificationType
      parameters:
        - in: path
          name: roleTypeOrRoleId
          required: true
          schema:
            type: string
        - in: path
          name: notificationType
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '404':
          description: Not Found
      security:
        - api_token: []
        - oauth2:
            - okta.roles.manage
      tags:
        - Subscription
  /api/v1/roles/{roleTypeOrRoleId}/subscriptions/{notificationType}/unsubscribe:
    post:
      summary: Unsubscribe a Custom Role from a specific notification type
      description: When roleType Unsubscribes a Role from a specific notification type. When you change the subscription status of a Role, it overrides the subscription of any individual user of that Role. Else when roleId Unsubscribes a Custom Role from a specific notification type. When you change the subscription status of a Custom Role, it overrides the subscription of any individual user of that Custom Role.
      operationId: unsubscribeRoleSubscriptionByNotificationType
      parameters:
        - in: path
          name: roleTypeOrRoleId
          required: true
          schema:
            type: string
        - in: path
          name: notificationType
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '404':
          description: Not Found
      security:
        - api_token: []
        - oauth2:
            - okta.roles.manage
      tags:
        - Subscription
  /api/v1/sessions:
    post:
      summary: Create Session with Session Token
      description: Creates a new session for a user with a valid session token. Use this API if, for example, you want to set the session cookie yourself instead of allowing Okta to set it, or want to hold the session ID in order to delete a session via the API instead of visiting the logout URL.
      operationId: createSession
      x-codegen-request-body-name: createSessionRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          description: Bad Request
      security:
        - api_token: []
      tags:
        - Session
  /api/v1/sessions/{sessionId}:
    get:
      summary: Get Session
      description: Get details about a session.
      operationId: getSession
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          description: Bad Request
        '404':
          description: Not Found
      security:
        - api_token: []
        - oauth2:
            - okta.sessions.read
      tags:
        - Session
    delete:
      summary: End Session
      description: End a session.
      operationId: endSession
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.sessions.manage
      tags:
        - Session
  /api/v1/sessions/{sessionId}/lifecycle/refresh:
    post:
      summary: Refresh Session
      description: Refresh a session.
      operationId: refreshSession
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404':
          description: Not Found
      security:
        - api_token: []
        - oauth2:
            - okta.sessions.manage
      tags:
        - Session
  /api/v1/templates/sms:
    get:
      summary: List SMS Templates
      description: Enumerates custom SMS templates in your organization. A subset of templates can be returned that match a template type.
      operationId: listSmsTemplates
      parameters:
        - name: templateType
          in: query
          schema:
            $ref: '#/components/schemas/SmsTemplateType'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SmsTemplate'
      security:
        - api_token: []
        - oauth2:
            - okta.templates.read
      tags:
        - Template
    post:
      summary: Add SMS Template
      description: Adds a new custom SMS template to your organization.
      operationId: createSmsTemplate
      x-codegen-request-body-name: smsTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmsTemplate'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmsTemplate'
      security:
        - api_token: []
        - oauth2:
            - okta.templates.manage
      tags:
        - Template
  /api/v1/templates/sms/{templateId}:
    get:
      summary: Get SMS Template
      description: Fetches a specific template by `id`
      operationId: getSmsTemplate
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmsTemplate'
      security:
        - api_token: []
        - oauth2:
            - okta.templates.read
      tags:
        - Template
    post:
      summary: Partial SMS Template Update
      description: 'Updates only some of the SMS template properties:'
      operationId: partialUpdateSmsTemplate
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: smsTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmsTemplate'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmsTemplate'
      security:
        - api_token: []
        - oauth2:
            - okta.templates.manage
      tags:
        - Template
    put:
      summary: Update SMS Template
      description: Updates the SMS template.
      operationId: updateSmsTemplate
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: smsTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmsTemplate'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmsTemplate'
      security:
        - api_token: []
        - oauth2:
            - okta.templates.manage
      tags:
        - Template
    delete:
      summary: Remove SMS Template
      description: Removes an SMS template.
      operationId: deleteSmsTemplate
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.templates.manage
      tags:
        - Template
  /api/v1/threats/configuration:
    get:
      summary: Get Current Configuration
      description: Gets current ThreatInsight configuration
      operationId: getCurrentConfiguration
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreatInsightConfiguration'
      security:
        - api_token: []
      tags:
        - ThreatInsight
    post:
      summary: Update Configuration
      description: Updates ThreatInsight configuration
      operationId: updateConfiguration
      x-codegen-request-body-name: threatInsightConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreatInsightConfiguration'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreatInsightConfiguration'
      security:
        - api_token: []
      tags:
        - ThreatInsight
  /api/v1/trustedOrigins:
    get:
      summary: List Trusted Origins
      description: Success
      operationId: listOrigins
      parameters:
        - name: q
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
        - name: after
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: -1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrustedOrigin'
      security:
        - api_token: []
        - oauth2:
            - okta.trustedOrigins.read
      tags:
        - TrustedOrigin
    post:
      summary: Create Trusted Origin
      description: Success
      operationId: createOrigin
      x-codegen-request-body-name: trustedOrigin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrustedOrigin'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedOrigin'
      security:
        - api_token: []
        - oauth2:
            - okta.trustedOrigins.manage
      tags:
        - TrustedOrigin
  /api/v1/trustedOrigins/{trustedOriginId}:
    get:
      summary: Get Trusted Origin
      description: Success
      operationId: getOrigin
      parameters:
        - name: trustedOriginId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedOrigin'
      security:
        - api_token: []
        - oauth2:
            - okta.trustedOrigins.read
      tags:
        - TrustedOrigin
    put:
      summary: Update Trusted Origin
      description: Success
      operationId: updateOrigin
      parameters:
        - name: trustedOriginId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: trustedOrigin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrustedOrigin'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedOrigin'
      security:
        - api_token: []
        - oauth2:
            - okta.trustedOrigins.manage
      tags:
        - TrustedOrigin
    delete:
      summary: Delete Trusted Origin
      description: Success
      operationId: deleteOrigin
      parameters:
        - name: trustedOriginId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.trustedOrigins.manage
      tags:
        - TrustedOrigin
  /api/v1/trustedOrigins/{trustedOriginId}/lifecycle/activate:
    post:
      summary: Activate Trusted Origin
      description: Success
      operationId: activateOrigin
      parameters:
        - name: trustedOriginId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedOrigin'
      security:
        - api_token: []
        - oauth2:
            - okta.trustedOrigins.manage
      tags:
        - TrustedOrigin
  /api/v1/trustedOrigins/{trustedOriginId}/lifecycle/deactivate:
    post:
      summary: Deactivate Trusted Origin
      description: Success
      operationId: deactivateOrigin
      parameters:
        - name: trustedOriginId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustedOrigin'
      security:
        - api_token: []
        - oauth2:
            - okta.trustedOrigins.manage
      tags:
        - TrustedOrigin
  /api/v1/users:
    get:
      summary: List Users
      description: Lists users in your organization with pagination in most cases.  A subset of users can be returned that match a supported filter expression or search criteria.
      operationId: listUsers
      parameters:
        - name: q
          in: query
          description: Finds a user that matches firstName, lastName, and email properties
          schema:
            type: string
        - name: after
          in: query
          description: Specifies the pagination cursor for the next page of users
          schema:
            type: string
        - name: limit
          in: query
          description: Specifies the number of results returned
          schema:
            type: integer
            format: int32
            default: 10
        - name: filter
          in: query
          description: Filters users with a supported expression for a subset of properties
          schema:
            type: string
        - name: search
          in: query
          description: Searches for users with a supported filtering  expression for most properties
          schema:
            type: string
        - name: sortBy
          in: query
          schema:
            type: string
        - name: sortOrder
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - api_token: []
        - oauth2:
            - okta.users.read.self
      tags:
        - User
    post:
      summary: Create User
      description: Creates a new user in your Okta organization with or without credentials.
      operationId: createUser
      parameters:
        - name: activate
          in: query
          description: Executes activation lifecycle operation when creating the user
          schema:
            type: boolean
            default: true
        - name: provider
          in: query
          description: Indicates whether to create a user with a specified authentication provider
          schema:
            type: boolean
            default: false
        - name: nextLogin
          in: query
          description: With activate=true, set nextLogin to "changePassword" to have the password be EXPIRED, so user must change it the next time they log in.
          schema:
            $ref: '#/components/schemas/UserNextLogin'
          x-okta-added-version: 0.14.0
      x-codegen-request-body-name: body
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{associatedUserId}/linkedObjects/{primaryRelationshipName}/{primaryUserId}:
    put:
      summary: Set Linked Object for User
      description: Sets a linked object for a user.
      operationId: setLinkedObjectForUser
      parameters:
        - name: associatedUserId
          in: path
          required: true
          schema:
            type: string
        - name: primaryRelationshipName
          in: path
          required: true
          schema:
            type: string
        - name: primaryUserId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          content: {}
      security:
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}:
    get:
      summary: Get User
      description: Fetches a user from your Okta organization.
      operationId: getUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - api_token: []
        - oauth2:
            - okta.users.read
      tags:
        - User
    post:
      summary: Partial Update User
      description: Fetch a user by `id`, `login`, or `login shortname` if the short name is unambiguous.
      operationId: partialUpdateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: strict
          in: query
          schema:
            type: boolean
      x-codegen-request-body-name: user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
    put:
      summary: Update User
      description: Update a user's profile and/or credentials using strict-update semantics.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: strict
          in: query
          schema:
            type: boolean
          x-okta-added-version: 1.10.0
      x-codegen-request-body-name: user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
    delete:
      summary: Delete User
      description: Deletes a user permanently.  This operation can only be performed on users that have a `DEPROVISIONED` status.  **This action cannot be recovered!**
      operationId: deactivateOrDeleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: sendEmail
          in: query
          schema:
            type: boolean
            default: false
          x-okta-added-version: 1.5.0
      responses:
        '202':
          description: ACCEPTED
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/appLinks:
    get:
      summary: Get Assigned App Links
      description: Fetches appLinks for all direct or indirect (via group membership) assigned applications.
      operationId: listAppLinks
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppLink'
      security:
        - api_token: []
        - oauth2:
            - okta.users.read
      tags:
        - User
  /api/v1/users/{userId}/clients:
    get:
      summary: List User Clients
      description: Lists all client resources for which the specified user has grants or tokens.
      operationId: listUserClients
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuth2Client'
      security:
        - api_token: []
        - oauth2:
            - okta.users.read
      tags:
        - User
  /api/v1/users/{userId}/clients/{clientId}/grants:
    get:
      summary: List Grants for User and Client
      description: Lists all grants for a specified user and client
      operationId: listGrantsForUserAndClient
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: clientId
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
        - name: after
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuth2ScopeConsentGrant'
      security:
        - api_token: []
        - oauth2:
            - okta.users.read
      tags:
        - User
    delete:
      summary: Revoke Grants for User and Client
      description: Revokes all grants for the specified user and client
      operationId: revokeGrantsForUserAndClient
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: clientId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/clients/{clientId}/tokens:
    get:
      summary: List Refresh Tokens for User and Client
      description: Lists all refresh tokens issued for the specified User and Client.
      operationId: listRefreshTokensForUserAndClient
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: clientId
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
        - name: after
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuth2RefreshToken'
      security:
        - api_token: []
        - oauth2:
            - okta.users.read
      tags:
        - User
    delete:
      summary: Revoke Tokens for User and Client
      description: Revokes all refresh tokens issued for the specified User and Client.
      operationId: revokeTokensForUserAndClient
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: clientId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/clients/{clientId}/tokens/{tokenId}:
    get:
      summary: Get Refresh Token for User and Client
      description: Gets a refresh token issued for the specified User and Client.
      operationId: getRefreshTokenForUserAndClient
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: clientId
          in: path
          required: true
          schema:
            type: string
        - name: tokenId
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: after
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2RefreshToken'
      security:
        - api_token: []
        - oauth2:
            - okta.users.read
      tags:
        - User
    delete:
      summary: Revoke Token for User and Client
      description: Revokes the specified refresh token.
      operationId: revokeTokenForUserAndClient
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: clientId
          in: path
          required: true
          schema:
            type: string
        - name: tokenId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/credentials/change_password:
    post:
      summary: Change Password
      description: Changes a user's password by validating the user's current password. This operation can only be performed on users in `STAGED`, `ACTIVE`, `PASSWORD_EXPIRED`, or `RECOVERY` status that have a valid password credential
      operationId: changePassword
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: strict
          in: query
          schema:
            type: boolean
          x-okta-added-version: 1.10.0
      x-codegen-request-body-name: changePasswordRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCredentials'
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/credentials/change_recovery_question:
    post:
      summary: Change Recovery Question
      description: Changes a user's recovery question & answer credential by validating the user's current password.  This operation can only be performed on users in **STAGED**, **ACTIVE** or **RECOVERY** `status` that have a valid password credential
      operationId: changeRecoveryQuestion
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: userCredentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCredentials'
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/credentials/forgot_password:
    post:
      summary: Initiate Forgot Password
      description: Initiate forgot password flow. Generates a one-time token (OTT) that can be used to reset a user's password.
      operationId: forgotPassword
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: sendEmail
          in: query
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Reset url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgotPasswordResponse'
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/credentials/forgot_password_recovery_question:
    post:
      summary: Reset Password with Recovery Question
      description: Resets the user's password to the specified password if the provided answer to the recovery question is correct.
      operationId: forgotPasswordSetNewPassword
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: sendEmail
          in: query
          required: false
          schema:
            type: boolean
            default: true
      x-codegen-request-body-name: userCredentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
        required: true
      responses:
        '200':
          description: Credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCredentials'
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/factors:
    get:
      summary: List Factors
      description: Enumerates all the enrolled factors for the specified user
      operationId: listFactors
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserFactor'
      security:
        - api_token: []
        - oauth2:
            - okta.users.read
      tags:
        - UserFactor
    post:
      summary: Enroll Factor
      description: Enrolls a user with a supported factor.
      operationId: enrollFactor
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: updatePhone
          in: query
          schema:
            type: boolean
            default: false
        - name: templateId
          in: query
          description: id of SMS template (only for SMS factor)
          schema:
            type: string
        - name: tokenLifetimeSeconds
          in: query
          schema:
            type: integer
            format: int32
            default: 300
          x-okta-added-version: 1.3.0
        - name: activate
          in: query
          schema:
            type: boolean
            default: false
          x-okta-added-version: 1.3.0
      x-codegen-request-body-name: body
      requestBody:
        description: Factor
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserFactor'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFactor'
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - UserFactor
  /api/v1/users/{userId}/factors/catalog:
    get:
      summary: List Supported Factors
      description: Enumerates all the supported factors that can be enrolled for the specified user
      operationId: listSupportedFactors
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserFactor'
      security:
        - api_token: []
        - oauth2:
            - okta.users.read
      tags:
        - UserFactor
  /api/v1/users/{userId}/factors/questions:
    get:
      summary: List Supported Security Questions
      description: Enumerates all available security questions for a user's `question` factor
      operationId: listSupportedSecurityQuestions
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SecurityQuestion'
      security:
        - api_token: []
      tags:
        - UserFactor
  /api/v1/users/{userId}/factors/{factorId}:
    get:
      summary: Get Factor
      description: Fetches a factor for the specified user
      operationId: getFactor
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: factorId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFactor'
      security:
        - api_token: []
        - oauth2:
            - okta.users.read
      tags:
        - UserFactor
    delete:
      summary: Delete Factor
      description: Unenrolls an existing factor for the specified user, allowing the user to enroll a new factor.
      operationId: deleteFactor
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: factorId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - UserFactor
  /api/v1/users/{userId}/factors/{factorId}/lifecycle/activate:
    post:
      summary: Activate Factor
      description: The `sms` and `token:software:totp` factor types require activation to complete the enrollment process.
      operationId: activateFactor
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: factorId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: body
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateFactorRequest'
        required: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFactor'
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - UserFactor
  /api/v1/users/{userId}/factors/{factorId}/transactions/{transactionId}:
    get:
      summary: Get Factor Transaction Status
      description: Polls factors verification transaction for status.
      operationId: getFactorTransactionStatus
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: factorId
          in: path
          required: true
          schema:
            type: string
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyUserFactorResponse'
      security:
        - api_token: []
      tags:
        - UserFactor
  /api/v1/users/{userId}/factors/{factorId}/verify:
    post:
      summary: Verify MFA Factor
      description: Verifies an OTP for a `token` or `token:hardware` factor
      operationId: verifyFactor
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: factorId
          in: path
          required: true
          schema:
            type: string
        - name: templateId
          in: query
          schema:
            type: string
        - name: tokenLifetimeSeconds
          in: query
          schema:
            type: integer
            format: int32
            default: 300
          x-okta-added-version: 1.3.0
        - name: X-Forwarded-For
          in: header
          schema:
            type: string
          x-okta-added-version: 1.11.0
        - name: User-Agent
          in: header
          schema:
            type: string
          x-okta-added-version: 1.11.0
        - name: Accept-Language
          in: header
          schema:
            type: string
      x-codegen-request-body-name: body
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyFactorRequest'
        required: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyUserFactorResponse'
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - UserFactor
  /api/v1/users/{userId}/grants:
    get:
      summary: List User Grants
      description: Lists all grants for the specified user
      operationId: listUserGrants
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: scopeId
          in: query
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
        - name: after
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuth2ScopeConsentGrant'
      security:
        - api_token: []
        - oauth2:
            - okta.users.read
      tags:
        - User
    delete:
      summary: Revoke User Grants
      description: Revokes all grants for a specified user
      operationId: revokeUserGrants
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/grants/{grantId}:
    get:
      summary: Get User Grant
      description: Gets a grant for the specified user
      operationId: getUserGrant
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: grantId
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2ScopeConsentGrant'
      security:
        - api_token: []
        - oauth2:
            - okta.users.read
      tags:
        - User
    delete:
      summary: Revoke User Grant
      description: Revokes one grant for a specified user
      operationId: revokeUserGrant
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: grantId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/groups:
    get:
      summary: Get Member Groups
      description: Fetches the groups of which the user is a member.
      operationId: listUserGroups
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
      security:
        - api_token: []
        - oauth2:
            - okta.users.read
      tags:
        - User
  /api/v1/users/{userId}/idps:
    get:
      summary: Listing IdPs associated with a user
      description: Lists the IdPs associated with the user.
      operationId: listUserIdentityProviders
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IdentityProvider'
      security:
        - api_token: []
        - oauth2:
            - okta.users.read
      tags:
        - User
  /api/v1/users/{userId}/lifecycle/activate:
    post:
      summary: Activate User
      description: Activates a user.  This operation can only be performed on users with a `STAGED` status.  Activation of a user is an asynchronous operation. The user will have the `transitioningToStatus` property with a value of `ACTIVE` during activation to indicate that the user hasn't completed the asynchronous operation.  The user will have a status of `ACTIVE` when the activation process is complete.
      operationId: activateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: sendEmail
          in: query
          description: Sends an activation email to the user if true
          required: true
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserActivationToken'
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/lifecycle/deactivate:
    post:
      summary: Deactivate User
      description: 'Deactivates a user. This operation can only be performed on users that do not have a `DEPROVISIONED` status. While the asynchronous operation (triggered by HTTP header `Prefer: respond-async`) is proceeding the user''s `transitioningToStatus` property is `DEPROVISIONED`. The user''s status is `DEPROVISIONED` when the deactivation process is complete.'
      operationId: deactivateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: sendEmail
          in: query
          schema:
            type: boolean
            default: false
          x-okta-added-version: 1.5.0
      responses:
        '200':
          description: OK
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/lifecycle/expire_password:
    post:
      summary: Expire Password
      description: This operation transitions the user to the status of `PASSWORD_EXPIRED` so that the user is required to change their password at their next login.
      operationId: expirePassword
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/lifecycle/expire_password_with_temp_password:
    post:
      summary: Expire Password and Set Temporary Password
      description: This operation transitions the user to the status of `PASSWORD_EXPIRED` so that the user is required to change their password at their next login, and also sets the user's password to a temporary password returned in the response.
      operationId: expirePasswordAndGetTemporaryPassword
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TempPassword'
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/lifecycle/reactivate:
    post:
      summary: Reactivate User
      description: Reactivates a user.  This operation can only be performed on users with a `PROVISIONED` status.  This operation restarts the activation workflow if for some reason the user activation was not completed when using the activationToken from [Activate User](#activate-user).
      operationId: reactivateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: sendEmail
          in: query
          description: Sends an activation email to the user if true
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserActivationToken'
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/lifecycle/reset_factors:
    post:
      summary: Reset Factors
      description: This operation resets all factors for the specified user. All MFA factor enrollments returned to the unenrolled state. The user's status remains ACTIVE. This link is present only if the user is currently enrolled in one or more MFA factors.
      operationId: resetFactors
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/lifecycle/reset_password:
    post:
      summary: Reset Password
      description: Generates a one-time token (OTT) that can be used to reset a user's password.  The OTT link can be automatically emailed to the user or returned to the API caller and distributed using a custom flow.
      operationId: resetPassword
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: sendEmail
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordToken'
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/lifecycle/suspend:
    post:
      summary: Suspend User
      description: Suspends a user.  This operation can only be performed on users with an `ACTIVE` status.  The user will have a status of `SUSPENDED` when the process is complete.
      operationId: suspendUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/lifecycle/unlock:
    post:
      summary: Unlock User
      description: Unlocks a user with a `LOCKED_OUT` status and returns them to `ACTIVE` status.  Users will be able to login with their current password.
      operationId: unlockUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/lifecycle/unsuspend:
    post:
      summary: Unsuspend User
      description: Unsuspends a user and returns them to the `ACTIVE` state.  This operation can only be performed on users that have a `SUSPENDED` status.
      operationId: unsuspendUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/linkedObjects/{relationshipName}:
    get:
      summary: Get Linked Objects for User
      description: Get linked objects for a user, relationshipName can be a primary or associated relationship name
      operationId: getLinkedObjectsForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: relationshipName
          in: path
          required: true
          schema:
            type: string
        - name: after
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: -1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseLinks'
      security:
        - api_token: []
        - oauth2:
            - okta.users.read
      tags:
        - User
    delete:
      summary: Remove Linked Object for User
      description: Delete linked objects for a user, relationshipName can be ONLY a primary relationship name
      operationId: removeLinkedObjectForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: relationshipName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/roles:
    get:
      summary: List Assigned Roles for User
      description: Lists all roles assigned to a user.
      operationId: listAssignedRolesForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
      security:
        - api_token: []
        - oauth2:
            - okta.roles.read
      tags:
        - User
    post:
      summary: Assign Role to User
      description: Assigns a role to a user.
      operationId: assignRoleToUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: disableNotifications
          in: query
          schema:
            type: boolean
      x-codegen-request-body-name: assignRoleRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignRoleRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      security:
        - api_token: []
        - oauth2:
            - okta.roles.manage
      tags:
        - User
  /api/v1/users/{userId}/roles/{roleId}:
    get:
      summary: Get User Role
      description: Gets role that is assigned to user.
      operationId: getUserRole
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: roleId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      security:
        - api_token: []
        - oauth2:
            - okta.roles.read
      tags:
        - User
    delete:
      summary: Remove Role from User
      description: Unassigns a role from a user.
      operationId: removeRoleFromUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.roles.manage
      tags:
        - User
  /api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps:
    get:
      summary: List Application Targets for Application Administrator Role for User
      description: Lists all App targets for an `APP_ADMIN` Role assigned to a User. This methods return list may include full Applications or Instances. The response for an instance will have an `ID` value, while Application will not have an ID.
      operationId: listApplicationTargetsForApplicationAdministratorRoleForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: after
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogApplication'
      security:
        - api_token: []
        - oauth2:
            - okta.roles.read
      tags:
        - User
    put:
      summary: Add All Apps as Target to Role
      description: Success
      operationId: addAllAppsAsTargetToRole
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.roles.manage
      tags:
        - User
  /api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps/{appName}:
    put:
      summary: Add Application Target to Admin Role for User
      description: Success
      operationId: addApplicationTargetToAdminRoleForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: appName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.roles.manage
      tags:
        - User
    delete:
      summary: Remove Application Target from Application Administrator Role for User
      description: Success
      operationId: removeApplicationTargetFromApplicationAdministratorRoleForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: appName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.roles.manage
      tags:
        - User
  /api/v1/users/{userId}/roles/{roleId}/targets/catalog/apps/{appName}/{applicationId}:
    put:
      summary: Add App Instance Target to App Administrator Role given to a User
      description: Add App Instance Target to App Administrator Role given to a User
      operationId: addApplicationTargetToAppAdminRoleForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: appName
          in: path
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.roles.manage
      tags:
        - User
    delete:
      summary: Remove App Instance Target to App Administrator Role given to a User
      description: Remove App Instance Target to App Administrator Role given to a User
      operationId: removeApplicationTargetFromAdministratorRoleForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: appName
          in: path
          required: true
          schema:
            type: string
        - name: applicationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.roles.manage
      tags:
        - User
  /api/v1/users/{userId}/roles/{roleId}/targets/groups:
    get:
      summary: List Group Targets for Role
      description: Success
      operationId: listGroupTargetsForRole
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: after
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
      security:
        - api_token: []
        - oauth2:
            - okta.roles.read
      tags:
        - User
  /api/v1/users/{userId}/roles/{roleId}/targets/groups/{groupId}:
    put:
      summary: Add Group Target to Role
      description: Success
      operationId: addGroupTargetToRole
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.roles.manage
      tags:
        - User
    delete:
      summary: Remove Group Target from Role
      description: Success
      operationId: removeGroupTargetFromRole
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.roles.manage
      tags:
        - User
  /api/v1/users/{userId}/sessions:
    delete:
      summary: Clear User Sessions
      description: Removes all active identity provider sessions. This forces the user to authenticate on the next operation. Optionally revokes OpenID Connect and OAuth refresh and access tokens issued to the user.
      operationId: clearUserSessions
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: oauthTokens
          in: query
          description: Revoke issued OpenID Connect and OAuth refresh and access tokens
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: No Content
          content: {}
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - User
  /api/v1/users/{userId}/subscriptions:
    get:
      summary: List subscriptions of a User
      description: List subscriptions of a User. Only lists subscriptions for current user. An AccessDeniedException message is sent if requests are made from other users.
      operationId: listUserSubscriptions
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Subscription'
                type: array
        '404':
          description: Not Found
      security:
        - api_token: []
        - oauth2:
            - okta.users.read
      tags:
        - Subscription
  /api/v1/users/{userId}/subscriptions/{notificationType}:
    get:
      summary: Get the subscription of a User with a specific notification type
      description: Get the subscriptions of a User with a specific notification type. Only gets subscriptions for current user. An AccessDeniedException message is sent if requests are made from other users.
      operationId: getUserSubscriptionByNotificationType
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: notificationType
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '404':
          description: Not Found
      security:
        - api_token: []
        - oauth2:
            - okta.users.read
      tags:
        - Subscription
  /api/v1/users/{userId}/subscriptions/{notificationType}/subscribe:
    post:
      summary: Subscribe to a specific notification type
      description: Subscribes a User to a specific notification type. Only the current User can subscribe to a specific notification type. An AccessDeniedException message is sent if requests are made from other users.
      operationId: subscribeUserSubscriptionByNotificationType
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: notificationType
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '404':
          description: Not Found
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - Subscription
  /api/v1/users/{userId}/subscriptions/{notificationType}/unsubscribe:
    post:
      summary: Unsubscribe from a specific notification type
      description: Unsubscribes a User from a specific notification type. Only the current User can unsubscribe from a specific notification type. An AccessDeniedException message is sent if requests are made from other users.
      operationId: unsubscribeUserSubscriptionByNotificationType
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: notificationType
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '404':
          description: Not Found
      security:
        - api_token: []
        - oauth2:
            - okta.users.manage
      tags:
        - Subscription
  /api/v1/zones:
    get:
      summary: List Network Zones
      description: Enumerates network zones added to your organization with pagination. A subset of zones can be returned that match a supported filter expression or query.
      operationId: listNetworkZones
      parameters:
        - name: after
          in: query
          description: Specifies the pagination cursor for the next page of network zones
          schema:
            type: string
        - name: limit
          in: query
          description: Specifies the number of results for a page
          schema:
            type: integer
            format: int32
            default: -1
        - name: filter
          in: query
          description: Filters zones by usage or id expression
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NetworkZone'
      security:
        - api_token: []
      tags:
        - NetworkZone
    post:
      summary: Add Network Zone
      description: Adds a new network zone to your Okta organization.
      operationId: createNetworkZone
      x-codegen-request-body-name: zone
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkZone'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkZone'
      security:
        - api_token: []
      tags:
        - NetworkZone
  /api/v1/zones/{zoneId}:
    get:
      summary: Get Network Zone
      description: Fetches a network zone from your Okta organization by `id`.
      operationId: getNetworkZone
      parameters:
        - name: zoneId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkZone'
      security:
        - api_token: []
      tags:
        - NetworkZone
    put:
      summary: Update Network Zone
      description: Updates a network zone in your organization.
      operationId: updateNetworkZone
      parameters:
        - name: zoneId
          in: path
          required: true
          schema:
            type: string
      x-codegen-request-body-name: zone
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkZone'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkZone'
      security:
        - api_token: []
      tags:
        - NetworkZone
    delete:
      summary: Delete Network Zone
      description: Removes network zone.
      operationId: deleteNetworkZone
      parameters:
        - name: zoneId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: {}
      security:
        - api_token: []
      tags:
        - NetworkZone
  /api/v1/zones/{zoneId}/lifecycle/activate:
    post:
      summary: Activate Network Zone
      description: Activate Network Zone
      operationId: activateNetworkZone
      parameters:
        - name: zoneId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkZone'
      security:
        - api_token: []
      tags:
        - NetworkZone
  /api/v1/zones/{zoneId}/lifecycle/deactivate:
    post:
      summary: Deactivate Network Zone
      description: Deactivates a network zone.
      operationId: deactivateNetworkZone
      parameters:
        - name: zoneId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkZone'
      security:
        - api_token: []
      tags:
        - NetworkZone
components:
  securitySchemes:
    api_token:
      description: 'Pass the API token as the Authorization header value prefixed with SSWS: ''Authorizaion: SSWS {API Token}'''
      name: Authorization
      type: apiKey
      in: header
    oauth2:
      type: oauth2
      description: 'Pass the access_token as the value of the Authorization header: ''Authorization: {access_token}'''
      flows:
        authorizationCode:
          authorizationUrl: /oauth2/v1/authorize
          tokenUrl: /oauth2/v1/token
          scopes:
            okta.apps.read: Read Apps.
            okta.apps.manage: Read or modify Apps.
            okta.authenticators.read: Read Authenticators.
            okta.authenticators.manage: Read or modify Authenticators.
            okta.authorizationServers.read: Read Authorization Servers.
            okta.authorizationServers.manage: Read or modify Authorization Servers.
            okta.brands.read: Read Brands.
            okta.brands.manage: Read or modify Brands.
            okta.captchas.manage: Read or modify CAPTCHA instances in your org.
            okta.captchas.read: Read CAPTCHA instances in your org.
            okta.domains.read: Read Domains.
            okta.domains.manage: Read or modify Domains.
            okta.eventHooks.read: Read Event Hooks.
            okta.eventHooks.manage: Read or modify Event Hooks.
            okta.groups.read: Read Groups.
            okta.groups.manage: Read or modify Groups.
            okta.roles.read: Read Roles.
            okta.roles.manage: Read or modify Roles.
            okta.idps.read: Read Identity Providers.
            okta.idps.manage: Read or modify Identity Providers.
            okta.users.manage: Read or modify Users.
            okta.inlineHooks.read: Read Inline Hooks.
            okta.inlineHooks.manage: Read or modify Inline Hooks.
            okta.logs.read: Read Logs.
            okta.profileMappings.read: Read Profile Mappings.
            okta.profileMappings.manage: Read or modify Profile Mappings.
            okta.schemas.read: Read Schemas.
            okta.schemas.manage: Read or modify Schemas.
            okta.linkedObjects.read: Read Linked Objects.
            okta.linkedObjects.manage: Read or modify Linked Objects.
            okta.userTypes.read: Read Usertypes.
            okta.userTypes.manage: Read or modify Usertypes.
            okta.orgs.read: Read Org Settings.
            okta.orgs.manage: Read or modify Org Settings.
            okta.policies.read: Read Policies.
            okta.policies.manage: Read or modify Policies.
            okta.sessions.read: Read Sessions.
            okta.sessions.manage: Read or modify Sessions.
            okta.templates.read: Read Templates.
            okta.templates.manage: Read or modify Templates.
            okta.trustedOrigins.read: Read Trusted Origins.
            okta.trustedOrigins.manage: Read or modify Trusted Origins.
            okta.users.read.self: Read Users.
            okta.users.read: Read Users.
  schemas:
    AccessPolicy:
      allOf:
        - $ref: '#/components/schemas/Policy'
    AccessPolicyConstraint:
      type: object
      properties:
        methods:
          items:
            type: string
          type: array
        reauthenticateIn:
          type: string
        types:
          items:
            type: string
          type: array
    AccessPolicyConstraints:
      type: object
      properties:
        knowledge:
          $ref: '#/components/schemas/KnowledgeConstraint'
        possession:
          $ref: '#/components/schemas/PossessionConstraint'
    AccessPolicyRule:
      allOf:
        - $ref: '#/components/schemas/PolicyRule'
        - type: object
          properties:
            actions:
              $ref: '#/components/schemas/AccessPolicyRuleActions'
            conditions:
              $ref: '#/components/schemas/AccessPolicyRuleConditions'
            name:
              type: string
    AccessPolicyRuleActions:
      allOf:
        - $ref: '#/components/schemas/PolicyRuleActions'
        - type: object
          properties:
            appSignOn:
              $ref: '#/components/schemas/AccessPolicyRuleApplicationSignOn'
    AccessPolicyRuleApplicationSignOn:
      type: object
      properties:
        access:
          type: string
        verificationMethod:
          $ref: '#/components/schemas/VerificationMethod'
    AccessPolicyRuleConditions:
      allOf:
        - $ref: '#/components/schemas/PolicyRuleConditions'
        - type: object
          properties:
            device:
              $ref: '#/components/schemas/DeviceAccessPolicyRuleCondition'
            elCondition:
              $ref: '#/components/schemas/AccessPolicyRuleCustomCondition'
            userType:
              $ref: '#/components/schemas/UserTypeCondition'
    AccessPolicyRuleCustomCondition:
      properties:
        condition:
          type: string
    AcsEndpoint:
      type: object
      properties:
        url:
          type: string
        index:
          type: integer
    ActivateFactorRequest:
      type: object
      properties:
        attestation:
          type: string
        clientData:
          type: string
        passCode:
          type: string
        registrationData:
          type: string
        stateToken:
          type: string
    AllowedForEnum:
      type: string
      enum:
        - recovery
        - sso
        - any
        - none
    AppAndInstanceConditionEvaluatorAppOrInstance:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        type:
          $ref: '#/components/schemas/AppAndInstanceType'
    AppAndInstancePolicyRuleCondition:
      type: object
      properties:
        exclude:
          type: array
          items:
            $ref: '#/components/schemas/AppAndInstanceConditionEvaluatorAppOrInstance'
        include:
          type: array
          items:
            $ref: '#/components/schemas/AppAndInstanceConditionEvaluatorAppOrInstance'
    AppAndInstanceType:
      type: string
      enum:
        - APP_TYPE
        - APP
    AppInstancePolicyRuleCondition:
      type: object
      properties:
        exclude:
          type: array
          items:
            type: string
        include:
          type: array
          items:
            type: string
    AppLink:
      type: object
      properties:
        appAssignmentId:
          type: string
          readOnly: true
        appInstanceId:
          type: string
          readOnly: true
        appName:
          type: string
          readOnly: true
        credentialsSetup:
          type: boolean
          readOnly: true
        hidden:
          type: boolean
          readOnly: true
        id:
          type: string
          readOnly: true
        label:
          type: string
          readOnly: true
        linkUrl:
          type: string
          readOnly: true
        logoUrl:
          type: string
          readOnly: true
        sortOrder:
          type: integer
          readOnly: true
    AppUser:
      type: object
      properties:
        _embedded:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        credentials:
          $ref: '#/components/schemas/AppUserCredentials'
        externalId:
          type: string
          readOnly: true
        id:
          type: string
          readOnly: false
        lastSync:
          type: string
          format: date-time
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        passwordChanged:
          type: string
          format: date-time
          readOnly: true
        profile:
          type: object
          additionalProperties:
            type: object
            properties: {}
        scope:
          type: string
        status:
          type: string
          readOnly: true
        statusChanged:
          type: string
          format: date-time
          readOnly: true
        syncState:
          type: string
          readOnly: true
    AppUserCredentials:
      type: object
      properties:
        password:
          $ref: '#/components/schemas/AppUserPasswordCredential'
        userName:
          type: string
    AppUserPasswordCredential:
      type: object
      properties:
        value:
          type: string
          format: password
    Application:
      type: object
      properties:
        _embedded:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        accessibility:
          $ref: '#/components/schemas/ApplicationAccessibility'
        created:
          type: string
          format: date-time
          readOnly: true
        credentials:
          $ref: '#/components/schemas/ApplicationCredentials'
        features:
          type: array
          items:
            type: string
        id:
          type: string
          readOnly: true
        label:
          type: string
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        licensing:
          $ref: '#/components/schemas/ApplicationLicensing'
        name:
          type: string
          readOnly: true
        profile:
          type: object
          additionalProperties:
            type: object
            properties: {}
        settings:
          $ref: '#/components/schemas/ApplicationSettings'
        signOnMode:
          $ref: '#/components/schemas/ApplicationSignOnMode'
        status:
          $ref: '#/components/schemas/ApplicationLifecycleStatus'
        visibility:
          $ref: '#/components/schemas/ApplicationVisibility'
      discriminator:
        propertyName: signOnMode
        mapping:
          AUTO_LOGIN: '#/components/schemas/AutoLoginApplication'
          BASIC_AUTH: '#/components/schemas/BasicAuthApplication'
          BOOKMARK: '#/components/schemas/BookmarkApplication'
          BROWSER_PLUGIN: '#/components/schemas/BrowserPluginApplication'
          OPENID_CONNECT: '#/components/schemas/OpenIdConnectApplication'
          SAML_1_1: '#/components/schemas/SamlApplication'
          SAML_2_0: '#/components/schemas/SamlApplication'
          SECURE_PASSWORD_STORE: '#/components/schemas/SecurePasswordStoreApplication'
          WS_FEDERATION: '#/components/schemas/WsFederationApplication'
    ApplicationAccessibility:
      type: object
      properties:
        errorRedirectUrl:
          type: string
        loginRedirectUrl:
          type: string
        selfService:
          type: boolean
    ApplicationCredentials:
      type: object
      properties:
        signing:
          $ref: '#/components/schemas/ApplicationCredentialsSigning'
        userNameTemplate:
          $ref: '#/components/schemas/ApplicationCredentialsUsernameTemplate'
    ApplicationCredentialsOAuthClient:
      type: object
      properties:
        autoKeyRotation:
          type: boolean
        client_id:
          type: string
        client_secret:
          type: string
        token_endpoint_auth_method:
          $ref: '#/components/schemas/OAuthEndpointAuthenticationMethod'
    ApplicationCredentialsScheme:
      type: string
      enum:
        - SHARED_USERNAME_AND_PASSWORD
        - EXTERNAL_PASSWORD_SYNC
        - EDIT_USERNAME_AND_PASSWORD
        - EDIT_PASSWORD_ONLY
        - ADMIN_SETS_CREDENTIALS
    ApplicationCredentialsSigning:
      type: object
      properties:
        kid:
          type: string
        lastRotated:
          type: string
          format: date-time
          readOnly: true
        nextRotation:
          type: string
          format: date-time
          readOnly: true
        rotationMode:
          type: string
        use:
          $ref: '#/components/schemas/ApplicationCredentialsSigningUse'
    ApplicationCredentialsSigningUse:
      type: string
      enum:
        - sig
    ApplicationCredentialsUsernameTemplate:
      type: object
      properties:
        pushStatus:
          type: string
        suffix:
          type: string
        template:
          type: string
        type:
          type: string
    ApplicationFeature:
      type: object
      properties:
        _links:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        capabilities:
          $ref: '#/components/schemas/CapabilitiesObject'
        description:
          type: string
        name:
          type: string
        status:
          $ref: '#/components/schemas/EnabledStatus'
    ApplicationGroupAssignment:
      type: object
      properties:
        _embedded:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        id:
          type: string
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        priority:
          type: integer
        profile:
          type: object
          additionalProperties:
            type: object
            properties: {}
    ApplicationLicensing:
      type: object
      properties:
        seatCount:
          type: integer
    ApplicationLifecycleStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - DELETED
      readOnly: true
    ApplicationSettings:
      type: object
      properties:
        app:
          $ref: '#/components/schemas/ApplicationSettingsApplication'
        implicitAssignment:
          type: boolean
        inlineHookId:
          type: string
        notifications:
          $ref: '#/components/schemas/ApplicationSettingsNotifications'
        notes:
          $ref: '#/components/schemas/ApplicationSettingsNotes'
    ApplicationSettingsApplication:
      type: object
    ApplicationSettingsNotes:
      type: object
      properties:
        admin:
          type: string
        enduser:
          type: string
    ApplicationSettingsNotifications:
      type: object
      properties:
        vpn:
          $ref: '#/components/schemas/ApplicationSettingsNotificationsVpn'
    ApplicationSettingsNotificationsVpn:
      type: object
      properties:
        helpUrl:
          type: string
        message:
          type: string
        network:
          $ref: '#/components/schemas/ApplicationSettingsNotificationsVpnNetwork'
    ApplicationSettingsNotificationsVpnNetwork:
      type: object
      properties:
        connection:
          type: string
        exclude:
          type: array
          items:
            type: string
        include:
          type: array
          items:
            type: string
    ApplicationSignOnMode:
      type: string
      enum:
        - BOOKMARK
        - BASIC_AUTH
        - BROWSER_PLUGIN
        - SECURE_PASSWORD_STORE
        - AUTO_LOGIN
        - WS_FEDERATION
        - SAML_2_0
        - OPENID_CONNECT
        - SAML_1_1
    ApplicationVisibility:
      type: object
      properties:
        appLinks:
          type: object
          additionalProperties:
            type: boolean
        autoLaunch:
          type: boolean
        autoSubmitToolbar:
          type: boolean
        hide:
          $ref: '#/components/schemas/ApplicationVisibilityHide'
    ApplicationVisibilityHide:
      type: object
      properties:
        iOS:
          type: boolean
        web:
          type: boolean
    AssignRoleRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/RoleType'
    AuthenticationProvider:
      type: object
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/AuthenticationProviderType'
    AuthenticationProviderType:
      type: string
      enum:
        - ACTIVE_DIRECTORY
        - FEDERATION
        - LDAP
        - OKTA
        - SOCIAL
        - IMPORT
    Authenticator:
      type: object
      properties:
        _links:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        created:
          format: date-time
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        key:
          type: string
        status:
          $ref: '#/components/schemas/AuthenticatorStatus'
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        name:
          type: string
        provider:
          $ref: '#/components/schemas/AuthenticatorProvider'
        type:
          $ref: '#/components/schemas/AuthenticatorType'
        settings:
          $ref: '#/components/schemas/AuthenticatorSettings'
    AuthenticatorProvider:
      properties:
        configuration:
          $ref: '#/components/schemas/AuthenticatorProviderConfiguration'
        type:
          type: string
    AuthenticatorProviderConfiguration:
      properties:
        authPort:
          type: integer
        hostName:
          type: string
        instanceId:
          type: string
        sharedSecret:
          type: string
        userNameTemplate:
          $ref: '#/components/schemas/AuthenticatorProviderConfigurationUserNameTemplate'
    AuthenticatorProviderConfigurationUserNameTemplate:
      properties:
        template:
          type: string
    AuthenticatorSettings:
      type: object
      properties:
        allowedFor:
          $ref: '#/components/schemas/AllowedForEnum'
        appInstanceId:
          type: string
        channelBinding:
          $ref: '#/components/schemas/ChannelBinding'
        compliance:
          $ref: '#/components/schemas/Compliance'
        tokenLifetimeInMinutes:
          type: integer
        userVerification:
          $ref: '#/components/schemas/UserVerificationEnum'
    AuthenticatorStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
    AuthenticatorType:
      type: string
      enum:
        - app
        - password
        - security_question
        - phone
        - email
        - security_key
        - federated
    AuthorizationServer:
      type: object
      properties:
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        audiences:
          type: array
          items:
            type: string
        created:
          type: string
          format: date-time
          readOnly: true
        credentials:
          $ref: '#/components/schemas/AuthorizationServerCredentials'
        description:
          type: string
        id:
          type: string
          readOnly: true
        issuer:
          type: string
        issuerMode:
          $ref: '#/components/schemas/IssuerMode'
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
        status:
          $ref: '#/components/schemas/LifecycleStatus'
    AuthorizationServerCredentials:
      type: object
      properties:
        signing:
          $ref: '#/components/schemas/AuthorizationServerCredentialsSigningConfig'
    AuthorizationServerCredentialsRotationMode:
      type: string
      enum:
        - AUTO
        - MANUAL
    AuthorizationServerCredentialsSigningConfig:
      type: object
      properties:
        kid:
          type: string
        lastRotated:
          type: string
          format: date-time
          readOnly: true
        nextRotation:
          type: string
          format: date-time
          readOnly: true
        rotationMode:
          $ref: '#/components/schemas/AuthorizationServerCredentialsRotationMode'
        use:
          $ref: '#/components/schemas/AuthorizationServerCredentialsUse'
    AuthorizationServerCredentialsUse:
      type: string
      enum:
        - sig
    AuthorizationServerPolicy:
      allOf:
        - $ref: '#/components/schemas/Policy'
    AuthorizationServerPolicyRule:
      allOf:
        - $ref: '#/components/schemas/PolicyRule'
        - type: object
          properties:
            conditions:
              $ref: '#/components/schemas/AuthorizationServerPolicyRuleConditions'
            actions:
              $ref: '#/components/schemas/AuthorizationServerPolicyRuleActions'
    AuthorizationServerPolicyRuleActions:
      allOf:
        - $ref: '#/components/schemas/PolicyRuleActions'
        - type: object
          properties:
            token:
              $ref: '#/components/schemas/TokenAuthorizationServerPolicyRuleAction'
    AuthorizationServerPolicyRuleConditions:
      allOf:
        - $ref: '#/components/schemas/PolicyRuleConditions'
        - type: object
          properties:
            people:
              $ref: '#/components/schemas/PolicyPeopleCondition'
            clients:
              $ref: '#/components/schemas/ClientPolicyCondition'
            grantTypes:
              $ref: '#/components/schemas/GrantTypePolicyRuleCondition'
            scopes:
              $ref: '#/components/schemas/OAuth2ScopesMediationPolicyRuleCondition'
    AutoLoginApplication:
      allOf:
        - $ref: '#/components/schemas/Application'
        - type: object
          properties:
            credentials:
              $ref: '#/components/schemas/SchemeApplicationCredentials'
            settings:
              $ref: '#/components/schemas/AutoLoginApplicationSettings'
    AutoLoginApplicationSettings:
      allOf:
        - $ref: '#/components/schemas/ApplicationSettings'
        - type: object
          properties:
            signOn:
              $ref: '#/components/schemas/AutoLoginApplicationSettingsSignOn'
    AutoLoginApplicationSettingsSignOn:
      type: object
      properties:
        loginUrl:
          type: string
        redirectUrl:
          type: string
    BasicApplicationSettings:
      allOf:
        - $ref: '#/components/schemas/ApplicationSettings'
        - type: object
          properties:
            app:
              $ref: '#/components/schemas/BasicApplicationSettingsApplication'
    BasicApplicationSettingsApplication:
      allOf:
        - $ref: '#/components/schemas/ApplicationSettingsApplication'
        - type: object
          properties:
            authURL:
              type: string
            url:
              type: string
    BasicAuthApplication:
      x-okta-defined-as:
        name: template_basic_auth
      allOf:
        - $ref: '#/components/schemas/Application'
        - type: object
          properties:
            credentials:
              $ref: '#/components/schemas/SchemeApplicationCredentials'
            name:
              type: string
              default: template_basic_auth
            settings:
              $ref: '#/components/schemas/BasicApplicationSettings'
    BeforeScheduledActionPolicyRuleCondition:
      type: object
      properties:
        duration:
          $ref: '#/components/schemas/Duration'
        lifecycleAction:
          $ref: '#/components/schemas/ScheduledUserLifecycleAction'
    BookmarkApplication:
      x-okta-defined-as:
        name: bookmark
      allOf:
        - $ref: '#/components/schemas/Application'
        - type: object
          properties:
            name:
              type: string
              default: bookmark
            settings:
              $ref: '#/components/schemas/BookmarkApplicationSettings'
    BookmarkApplicationSettings:
      allOf:
        - $ref: '#/components/schemas/ApplicationSettings'
        - type: object
          properties:
            app:
              $ref: '#/components/schemas/BookmarkApplicationSettingsApplication'
    BookmarkApplicationSettingsApplication:
      allOf:
        - $ref: '#/components/schemas/ApplicationSettingsApplication'
        - type: object
          properties:
            requestIntegration:
              type: boolean
            url:
              type: string
    BouncesRemoveListError:
      type: object
      properties:
        emailAddress:
          type: string
        reason:
          type: string
    BouncesRemoveListObj:
      type: object
      properties:
        emailAddresses:
          type: array
          items:
            type: string
    BouncesRemoveListResult:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/BouncesRemoveListError'
    Brand:
      type: object
      properties:
        _links:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        agreeToCustomPrivacyPolicy:
          type: boolean
        customPrivacyPolicyUrl:
          type: string
        id:
          readOnly: true
          type: string
        removePoweredByOkta:
          type: boolean
    BrowserPluginApplication:
      allOf:
        - $ref: '#/components/schemas/Application'
        - type: object
          properties:
            credentials:
              $ref: '#/components/schemas/SchemeApplicationCredentials'
      discriminator:
        propertyName: name
        mapping:
          template_swa: '#/components/schemas/SwaApplication'
          template_swa3field: '#/components/schemas/SwaThreeFieldApplication'
    CAPTCHAInstance:
      title: CAPTCHAInstance
      description: ''
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        secretKey:
          type: string
          writeOnly: true
        siteKey:
          type: string
        type:
          $ref: '#/components/schemas/CAPTCHAType'
        _link:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/HrefObject'
          readOnly: true
    CAPTCHAType:
      type: string
      enum:
        - HCAPTCHA
        - RECAPTCHA_V2
    CallUserFactor:
      allOf:
        - $ref: '#/components/schemas/UserFactor'
        - type: object
          properties:
            profile:
              $ref: '#/components/schemas/CallUserFactorProfile'
    CallUserFactorProfile:
      type: object
      properties:
        phoneExtension:
          type: string
        phoneNumber:
          type: string
    CapabilitiesCreateObject:
      type: object
      properties:
        lifecycleCreate:
          $ref: '#/components/schemas/LifecycleCreateSettingObject'
    CapabilitiesObject:
      type: object
      properties:
        create:
          $ref: '#/components/schemas/CapabilitiesCreateObject'
        update:
          $ref: '#/components/schemas/CapabilitiesUpdateObject'
    CapabilitiesUpdateObject:
      type: object
      properties:
        lifecycleDeactivate:
          $ref: '#/components/schemas/LifecycleDeactivateSettingObject'
        password:
          $ref: '#/components/schemas/PasswordSettingObject'
        profile:
          $ref: '#/components/schemas/ProfileSettingObject'
    CatalogApplication:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        displayName:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/CatalogApplicationStatus'
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        category:
          type: string
        verificationStatus:
          type: string
        website:
          type: string
        signOnModes:
          type: array
          items:
            type: string
        features:
          type: array
          items:
            type: string
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
    CatalogApplicationStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
    ChangeEnum:
      type: string
      enum:
        - KEEP_EXISTING
        - CHANGE
    ChangePasswordRequest:
      type: object
      properties:
        newPassword:
          $ref: '#/components/schemas/PasswordCredential'
        oldPassword:
          $ref: '#/components/schemas/PasswordCredential'
    ChannelBinding:
      type: object
      properties:
        required:
          $ref: '#/components/schemas/RequiredEnum'
        style:
          type: string
    ClientPolicyCondition:
      type: object
      properties:
        include:
          type: array
          items:
            type: string
    Compliance:
      type: object
      properties:
        fips:
          $ref: '#/components/schemas/FipsEnum'
    ContextPolicyRuleCondition:
      allOf:
        - $ref: '#/components/schemas/DevicePolicyRuleCondition'
        - type: object
          properties:
            expression:
              type: string
    CreateSessionRequest:
      type: object
      properties:
        sessionToken:
          type: string
    CreateUserRequest:
      type: object
      properties:
        credentials:
          $ref: '#/components/schemas/UserCredentials'
        groupIds:
          type: array
          items:
            type: string
        profile:
          $ref: '#/components/schemas/UserProfile'
        type:
          $ref: '#/components/schemas/UserType'
    Csr:
      type: object
      properties:
        created:
          type: string
          format: date-time
          readOnly: true
        csr:
          type: string
          readOnly: true
        id:
          type: string
          readOnly: true
        kty:
          type: string
          readOnly: true
    CsrMetadata:
      type: object
      properties:
        subject:
          $ref: '#/components/schemas/CsrMetadataSubject'
        subjectAltNames:
          $ref: '#/components/schemas/CsrMetadataSubjectAltNames'
    CsrMetadataSubject:
      type: object
      properties:
        commonName:
          type: string
        countryName:
          type: string
        localityName:
          type: string
        organizationName:
          type: string
        organizationalUnitName:
          type: string
        stateOrProvinceName:
          type: string
    CsrMetadataSubjectAltNames:
      type: object
      properties:
        dnsNames:
          type: array
          items:
            type: string
    CustomHotpUserFactor:
      allOf:
        - $ref: '#/components/schemas/UserFactor'
        - type: object
          properties:
            factorProfileId:
              type: string
            profile:
              $ref: '#/components/schemas/CustomHotpUserFactorProfile'
    CustomHotpUserFactorProfile:
      type: object
      properties:
        sharedSecret:
          type: string
    DNSRecord:
      type: object
      properties:
        expiration:
          type: string
        fqdn:
          type: string
        recordType:
          $ref: '#/components/schemas/DNSRecordType'
        values:
          type: array
          items:
            type: string
    DNSRecordType:
      type: string
      enum:
        - TXT
        - CNAME
    DeviceAccessPolicyRuleCondition:
      allOf:
        - $ref: '#/components/schemas/DevicePolicyRuleCondition'
        - type: object
          properties:
            managed:
              type: boolean
            registered:
              type: boolean
    DevicePolicyMDMFramework:
      type: string
      enum:
        - AFW
        - SAFE
        - NATIVE
    DevicePolicyPlatformType:
      type: string
      enum:
        - IOS
        - ANDROID
        - OSX
        - WINDOWS
    DevicePolicyRuleCondition:
      type: object
      properties:
        migrated:
          type: boolean
        platform:
          $ref: '#/components/schemas/DevicePolicyRuleConditionPlatform'
        rooted:
          type: boolean
        trustLevel:
          $ref: '#/components/schemas/DevicePolicyTrustLevel'
    DevicePolicyRuleConditionPlatform:
      type: object
      properties:
        supportedMDMFrameworks:
          type: array
          items:
            $ref: '#/components/schemas/DevicePolicyMDMFramework'
        types:
          type: array
          items:
            $ref: '#/components/schemas/DevicePolicyPlatformType'
    DevicePolicyTrustLevel:
      type: string
      enum:
        - ANY
        - TRUSTED
    Domain:
      type: object
      properties:
        certificateSourceType:
          $ref: '#/components/schemas/DomainCertificateSourceType'
        dnsRecords:
          type: array
          items:
            $ref: '#/components/schemas/DNSRecord'
        domain:
          type: string
        id:
          type: string
        publicCertificate:
          $ref: '#/components/schemas/DomainCertificateMetadata'
        validationStatus:
          $ref: '#/components/schemas/DomainValidationStatus'
    DomainCertificate:
      type: object
      properties:
        certificate:
          type: string
        certificateChain:
          type: string
        privateKey:
          type: string
        type:
          $ref: '#/components/schemas/DomainCertificateType'
    DomainCertificateMetadata:
      type: object
      properties:
        expiration:
          type: string
        fingerprint:
          type: string
        subject:
          type: string
    DomainCertificateSourceType:
      type: string
      enum:
        - MANUAL
        - OKTA_MANAGED
    DomainCertificateType:
      type: string
      enum:
        - PEM
    DomainLinks:
      type: object
      properties:
        certificate:
          type: object
          properties: {}
        self:
          type: object
          properties: {}
        verify:
          type: object
          properties: {}
    DomainListResponse:
      type: object
      properties:
        domains:
          type: array
          items:
            $ref: '#/components/schemas/DomainResponse'
    DomainResponse:
      type: object
      properties:
        certificateSourceType:
          $ref: '#/components/schemas/DomainCertificateSourceType'
        dnsRecords:
          type: array
          items:
            $ref: '#/components/schemas/DNSRecord'
        domain:
          type: string
        id:
          type: string
        _links:
          $ref: '#/components/schemas/DomainLinks'
        publicCertificate:
          $ref: '#/components/schemas/DomainCertificateMetadata'
        validationStatus:
          $ref: '#/components/schemas/DomainValidationStatus'
    DomainValidationStatus:
      type: string
      enum:
        - NOT_STARTED
        - IN_PROGRESS
        - VERIFIED
        - COMPLETED
    Duration:
      type: object
      properties:
        number:
          type: integer
        unit:
          type: string
    EmailTemplateTouchPointVariant:
      type: string
      enum:
        - OKTA_DEFAULT
        - FULL_THEME
    EmailUserFactor:
      allOf:
        - $ref: '#/components/schemas/UserFactor'
        - type: object
          properties:
            profile:
              $ref: '#/components/schemas/EmailUserFactorProfile'
    EmailUserFactorProfile:
      type: object
      properties:
        email:
          type: string
    EnabledStatus:
      type: string
      enum:
        - ENABLED
        - DISABLED
    EndUserDashboardTouchPointVariant:
      type: string
      enum:
        - OKTA_DEFAULT
        - WHITE_LOGO_BACKGROUND
        - FULL_THEME
        - LOGO_ON_FULL_WHITE_BACKGROUND
    Error:
      title: Error
      type: object
      properties:
        errorCode:
          type: string
          description: An Okta code for this type of error
        errorSummary:
          type: string
          description: A short description of what caused this error. Sometimes this contains dynamically-generated information about your specific error.
        errorLink:
          type: string
          description: An Okta code for this type of error
        errorId:
          type: string
          description: A unique identifier for this error. This can be used by Okta Support to help with troubleshooting.
        errorCauses:
          type: array
          items:
            type: object
            properties:
              errorSummary:
                type: string
    ErrorPageTouchPointVariant:
      type: string
      enum:
        - OKTA_DEFAULT
        - BACKGROUND_SECONDARY_COLOR
        - BACKGROUND_IMAGE
    EventHook:
      type: object
      properties:
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        channel:
          $ref: '#/components/schemas/EventHookChannel'
        created:
          type: string
          format: date-time
          readOnly: true
        createdBy:
          type: string
        events:
          $ref: '#/components/schemas/EventSubscriptions'
        id:
          type: string
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
        status:
          $ref: '#/components/schemas/LifecycleStatus'
        verificationStatus:
          $ref: '#/components/schemas/EventHookVerificationStatus'
    EventHookChannel:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/EventHookChannelConfig'
        type:
          $ref: '#/components/schemas/EventHookChannelType'
        version:
          type: string
    EventHookChannelConfig:
      type: object
      properties:
        authScheme:
          $ref: '#/components/schemas/EventHookChannelConfigAuthScheme'
        headers:
          type: array
          items:
            $ref: '#/components/schemas/EventHookChannelConfigHeader'
        uri:
          type: string
    EventHookChannelConfigAuthScheme:
      type: object
      properties:
        key:
          type: string
        type:
          $ref: '#/components/schemas/EventHookChannelConfigAuthSchemeType'
        value:
          type: string
    EventHookChannelConfigAuthSchemeType:
      type: string
      enum:
        - HEADER
    EventHookChannelConfigHeader:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    EventHookChannelType:
      type: string
      enum:
        - HTTP
    EventHookVerificationStatus:
      type: string
      enum:
        - UNVERIFIED
        - VERIFIED
    EventSubscriptionType:
      type: string
      enum:
        - EVENT_TYPE
        - FLOW_EVENT
    EventSubscriptions:
      type: object
      properties:
        items:
          type: array
          items:
            type: string
        type:
          $ref: '#/components/schemas/EventSubscriptionType'
      discriminator:
        propertyName: type
    FactorProvider:
      type: string
      enum:
        - OKTA
        - RSA
        - FIDO
        - GOOGLE
        - SYMANTEC
        - DUO
        - YUBICO
        - CUSTOM
    FactorResultType:
      type: string
      enum:
        - SUCCESS
        - CHALLENGE
        - WAITING
        - FAILED
        - REJECTED
        - TIMEOUT
        - TIME_WINDOW_EXCEEDED
        - PASSCODE_REPLAYED
        - ERROR
        - CANCELLED
    FactorStatus:
      type: string
      enum:
        - PENDING_ACTIVATION
        - ACTIVE
        - INACTIVE
        - NOT_SETUP
        - ENROLLED
        - DISABLED
        - EXPIRED
    FactorType:
      type: string
      enum:
        - call
        - email
        - hotp
        - push
        - question
        - sms
        - token:hardware
        - token:hotp
        - token:software:totp
        - token
        - u2f
        - web
        - webauthn
    Feature:
      type: object
      properties:
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        description:
          type: string
        id:
          type: string
          readOnly: true
        name:
          type: string
        stage:
          $ref: '#/components/schemas/FeatureStage'
        status:
          $ref: '#/components/schemas/EnabledStatus'
        type:
          $ref: '#/components/schemas/FeatureType'
    FeatureStage:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/FeatureStageState'
        value:
          $ref: '#/components/schemas/FeatureStageValue'
    FeatureStageState:
      type: string
      enum:
        - OPEN
        - CLOSED
    FeatureStageValue:
      type: string
      enum:
        - EA
        - BETA
    FeatureType:
      type: string
      enum:
        - self-service
    FipsEnum:
      type: string
      enum:
        - REQUIRED
        - OPTIONAL
    ForgotPasswordResponse:
      type: object
      properties:
        resetPasswordUrl:
          type: string
          readOnly: true
    GrantOrTokenStatus:
      type: string
      enum:
        - ACTIVE
        - REVOKED
    GrantTypePolicyRuleCondition:
      type: object
      properties:
        include:
          type: array
          items:
            type: string
    Group:
      type: object
      properties:
        _embedded:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        id:
          type: string
          readOnly: true
        lastMembershipUpdated:
          type: string
          format: date-time
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        objectClass:
          type: array
          readOnly: true
          items:
            type: string
        profile:
          $ref: '#/components/schemas/GroupProfile'
        type:
          $ref: '#/components/schemas/GroupType'
    GroupCondition:
      type: object
      properties:
        exclude:
          type: array
          items:
            type: string
        include:
          type: array
          items:
            type: string
    GroupPolicyRuleCondition:
      type: object
      properties:
        exclude:
          type: array
          items:
            type: string
        include:
          type: array
          items:
            type: string
    GroupProfile:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
      x-okta-extensible: true
    GroupRule:
      type: object
      properties:
        actions:
          $ref: '#/components/schemas/GroupRuleAction'
        conditions:
          $ref: '#/components/schemas/GroupRuleConditions'
        created:
          type: string
          format: date-time
          readOnly: true
        id:
          type: string
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
        status:
          $ref: '#/components/schemas/GroupRuleStatus'
        type:
          type: string
    GroupRuleAction:
      type: object
      properties:
        assignUserToGroups:
          $ref: '#/components/schemas/GroupRuleGroupAssignment'
    GroupRuleConditions:
      type: object
      properties:
        expression:
          $ref: '#/components/schemas/GroupRuleExpression'
        people:
          $ref: '#/components/schemas/GroupRulePeopleCondition'
    GroupRuleExpression:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
    GroupRuleGroupAssignment:
      type: object
      properties:
        groupIds:
          type: array
          items:
            type: string
    GroupRuleGroupCondition:
      type: object
      properties:
        exclude:
          type: array
          items:
            type: string
        include:
          type: array
          items:
            type: string
    GroupRulePeopleCondition:
      type: object
      properties:
        groups:
          $ref: '#/components/schemas/GroupRuleGroupCondition'
        users:
          $ref: '#/components/schemas/GroupRuleUserCondition'
    GroupRuleStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - INVALID
    GroupRuleUserCondition:
      type: object
      properties:
        exclude:
          type: array
          items:
            type: string
        include:
          type: array
          items:
            type: string
    GroupSchema:
      type: object
      properties:
        $schema:
          readOnly: true
          type: string
        _links:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        created:
          readOnly: true
          type: string
        definitions:
          $ref: '#/components/schemas/GroupSchemaDefinitions'
        description:
          type: string
        id:
          readOnly: true
          type: string
        lastUpdated:
          readOnly: true
          type: string
        name:
          readOnly: true
          type: string
        properties:
          $ref: '#/components/schemas/UserSchemaProperties'
        title:
          type: string
        type:
          readOnly: true
          type: string
    GroupSchemaAttribute:
      type: object
      properties:
        description:
          type: string
        enum:
          items:
            type: string
          type: array
        externalName:
          type: string
        externalNamespace:
          type: string
        items:
          $ref: '#/components/schemas/UserSchemaAttributeItems'
        master:
          $ref: '#/components/schemas/UserSchemaAttributeMaster'
        maxLength:
          type: integer
        minLength:
          type: integer
        mutability:
          type: string
        oneOf:
          items:
            $ref: '#/components/schemas/UserSchemaAttributeEnum'
          type: array
        permissions:
          items:
            $ref: '#/components/schemas/UserSchemaAttributePermission'
          type: array
        required:
          type: boolean
        scope:
          $ref: '#/components/schemas/UserSchemaAttributeScope'
        title:
          type: string
        type:
          $ref: '#/components/schemas/UserSchemaAttributeType'
        union:
          $ref: '#/components/schemas/UserSchemaAttributeUnion'
        unique:
          type: string
    GroupSchemaBase:
      type: object
      properties:
        id:
          readOnly: true
          type: string
        properties:
          $ref: '#/components/schemas/GroupSchemaBaseProperties'
        required:
          items:
            type: string
          type: array
        type:
          type: string
    GroupSchemaBaseProperties:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/GroupSchemaAttribute'
        name:
          $ref: '#/components/schemas/GroupSchemaAttribute'
    GroupSchemaCustom:
      type: object
      properties:
        id:
          readOnly: true
          type: string
        properties:
          additionalProperties:
            $ref: '#/components/schemas/GroupSchemaAttribute'
          type: object
        required:
          items:
            type: string
          type: array
        type:
          type: string
    GroupSchemaDefinitions:
      type: object
      properties:
        base:
          $ref: '#/components/schemas/GroupSchemaBase'
        custom:
          $ref: '#/components/schemas/GroupSchemaCustom'
    GroupType:
      type: string
      enum:
        - OKTA_GROUP
        - APP_GROUP
        - BUILT_IN
    HardwareUserFactor:
      allOf:
        - $ref: '#/components/schemas/UserFactor'
        - type: object
          properties:
            profile:
              $ref: '#/components/schemas/HardwareUserFactorProfile'
    HardwareUserFactorProfile:
      type: object
      properties:
        credentialId:
          type: string
    HrefObject:
      title: hrefObject
      description: Used for links
      type: object
      properties:
        href:
          type: string
        hints:
          type: object
          properties:
            allow:
              type: array
              items:
                $ref: '#/components/schemas/HttpMethod'
    HttpMethod:
      type: string
      enum:
        - GET
        - PUT
        - DELETE
        - POST
    IdentityProvider:
      type: object
      properties:
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        id:
          type: string
          readOnly: true
        issuerMode:
          $ref: '#/components/schemas/IssuerMode'
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
        policy:
          $ref: '#/components/schemas/IdentityProviderPolicy'
        protocol:
          $ref: '#/components/schemas/Protocol'
        status:
          $ref: '#/components/schemas/LifecycleStatus'
        type:
          type: string
          x-okta-known-values:
            - SAML2
            - GOOGLE
            - FACEBOOK
            - LINKEDIN
            - MICROSOFT
            - OIDC
            - OKTA
            - IWA
            - AgentlessDSSO
            - X509
    IdentityProviderApplicationUser:
      type: object
      properties:
        _embedded:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        created:
          type: string
        externalId:
          type: string
        id:
          type: string
          readOnly: true
        lastUpdated:
          type: string
        profile:
          type: object
          additionalProperties:
            type: object
            properties: {}
    IdentityProviderCredentials:
      type: object
      properties:
        client:
          $ref: '#/components/schemas/IdentityProviderCredentialsClient'
        signing:
          $ref: '#/components/schemas/IdentityProviderCredentialsSigning'
        trust:
          $ref: '#/components/schemas/IdentityProviderCredentialsTrust'
    IdentityProviderCredentialsClient:
      type: object
      properties:
        client_id:
          type: string
        client_secret:
          type: string
    IdentityProviderCredentialsSigning:
      type: object
      properties:
        kid:
          type: string
    IdentityProviderCredentialsTrust:
      type: object
      properties:
        audience:
          type: string
        issuer:
          type: string
        kid:
          type: string
        revocation:
          $ref: '#/components/schemas/IdentityProviderCredentialsTrustRevocation'
        revocationCacheLifetime:
          type: integer
    IdentityProviderCredentialsTrustRevocation:
      type: string
      enum:
        - CRL
        - DELTA_CRL
        - OCSP
    IdentityProviderPolicy:
      allOf:
        - $ref: '#/components/schemas/Policy'
        - type: object
          properties:
            accountLink:
              $ref: '#/components/schemas/PolicyAccountLink'
            maxClockSkew:
              type: integer
            provisioning:
              $ref: '#/components/schemas/Provisioning'
            subject:
              $ref: '#/components/schemas/PolicySubject'
    IdentityProviderPolicyProvider:
      type: string
      enum:
        - ANY
        - OKTA
        - SPECIFIC_IDP
    IdentityProviderPolicyRuleCondition:
      type: object
      properties:
        idpIds:
          type: array
          items:
            type: string
        provider:
          $ref: '#/components/schemas/IdentityProviderPolicyProvider'
    ImageUploadResponse:
      type: object
      properties:
        url:
          readOnly: true
          type: string
    InactivityPolicyRuleCondition:
      type: object
      properties:
        number:
          type: integer
        unit:
          type: string
    InlineHook:
      type: object
      properties:
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        channel:
          $ref: '#/components/schemas/InlineHookChannel'
        created:
          type: string
          format: date-time
          readOnly: true
        id:
          type: string
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
        status:
          $ref: '#/components/schemas/InlineHookStatus'
        type:
          $ref: '#/components/schemas/InlineHookType'
        version:
          type: string
    InlineHookChannel:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/InlineHookChannelConfig'
        type:
          $ref: '#/components/schemas/InlineHookChannelType'
        version:
          type: string
    InlineHookChannelConfig:
      type: object
      properties:
        authScheme:
          $ref: '#/components/schemas/InlineHookChannelConfigAuthScheme'
        headers:
          type: array
          items:
            $ref: '#/components/schemas/InlineHookChannelConfigHeaders'
        uri:
          type: string
        method:
          type: string
    InlineHookChannelConfigAuthScheme:
      type: object
      properties:
        key:
          type: string
        type:
          type: string
        value:
          type: string
    InlineHookChannelConfigHeaders:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    InlineHookChannelType:
      type: string
      enum:
        - HTTP
    InlineHookPayload:
      type: object
      x-okta-extensible: true
    InlineHookResponse:
      type: object
      properties:
        commands:
          type: array
          items:
            $ref: '#/components/schemas/InlineHookResponseCommands'
    InlineHookResponseCommandValue:
      type: object
      properties:
        op:
          type: string
        path:
          type: string
        value:
          type: string
    InlineHookResponseCommands:
      type: object
      properties:
        type:
          type: string
        value:
          type: array
          items:
            $ref: '#/components/schemas/InlineHookResponseCommandValue'
    InlineHookStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
    InlineHookType:
      type: string
      enum:
        - com.okta.oauth2.tokens.transform
        - com.okta.import.transform
        - com.okta.saml.tokens.transform
        - com.okta.user.pre-registration
        - com.okta.user.credential.password.import
    IssuerMode:
      type: string
      enum:
        - ORG_URL
        - CUSTOM_URL
    JsonWebKey:
      type: object
      properties:
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        alg:
          type: string
        created:
          type: string
          format: date-time
        e:
          type: string
        expiresAt:
          type: string
          format: date-time
        key_ops:
          type: array
          items:
            type: string
        kid:
          type: string
        kty:
          type: string
        lastUpdated:
          type: string
          format: date-time
        'n':
          type: string
        status:
          type: string
        use:
          type: string
        x5c:
          type: array
          items:
            type: string
        x5t:
          type: string
        x5t#S256:
          type: string
        x5u:
          type: string
    JwkUse:
      type: object
      properties:
        use:
          $ref: '#/components/schemas/JwkUseType'
    JwkUseType:
      type: string
      enum:
        - sig
    KnowledgeConstraint:
      allOf:
        - $ref: '#/components/schemas/AccessPolicyConstraint'
    Language:
      type: string
      description: The language specified as an [IETF BCP 47 language tag](https://datatracker.ietf.org/doc/html/rfc5646).
    LifecycleCreateSettingObject:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/EnabledStatus'
    LifecycleDeactivateSettingObject:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/EnabledStatus'
    LifecycleExpirationPolicyRuleCondition:
      type: object
      properties:
        lifecycleStatus:
          type: string
        number:
          type: integer
        unit:
          type: string
    LifecycleStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
    LinkedObject:
      type: object
      properties:
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        associated:
          $ref: '#/components/schemas/LinkedObjectDetails'
        primary:
          $ref: '#/components/schemas/LinkedObjectDetails'
    LinkedObjectDetails:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        title:
          type: string
        type:
          $ref: '#/components/schemas/LinkedObjectDetailsType'
    LinkedObjectDetailsType:
      type: string
      enum:
        - USER
    LogActor:
      type: object
      properties:
        alternateId:
          type: string
          readOnly: true
        detail:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        displayName:
          type: string
          readOnly: true
        id:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
    LogAuthenticationContext:
      type: object
      properties:
        authenticationProvider:
          $ref: '#/components/schemas/LogAuthenticationProvider'
        authenticationStep:
          type: integer
          readOnly: true
        credentialProvider:
          $ref: '#/components/schemas/LogCredentialProvider'
        credentialType:
          $ref: '#/components/schemas/LogCredentialType'
        externalSessionId:
          type: string
          readOnly: true
        interface:
          type: string
          readOnly: true
        issuer:
          $ref: '#/components/schemas/LogIssuer'
    LogAuthenticationProvider:
      type: string
      enum:
        - OKTA_AUTHENTICATION_PROVIDER
        - ACTIVE_DIRECTORY
        - LDAP
        - FEDERATION
        - SOCIAL
        - FACTOR_PROVIDER
    LogClient:
      type: object
      properties:
        device:
          type: string
          readOnly: true
        geographicalContext:
          $ref: '#/components/schemas/LogGeographicalContext'
        id:
          type: string
          readOnly: true
        ipAddress:
          type: string
          readOnly: true
        userAgent:
          $ref: '#/components/schemas/LogUserAgent'
        zone:
          type: string
          readOnly: true
    LogCredentialProvider:
      type: string
      enum:
        - OKTA_AUTHENTICATION_PROVIDER
        - OKTA_CREDENTIAL_PROVIDER
        - RSA
        - SYMANTEC
        - GOOGLE
        - DUO
        - YUBIKEY
    LogCredentialType:
      type: string
      enum:
        - OTP
        - SMS
        - PASSWORD
        - ASSERTION
        - IWA
        - EMAIL
        - OAUTH2
        - JWT
    LogDebugContext:
      type: object
      properties:
        debugData:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
    LogEvent:
      type: object
      properties:
        actor:
          $ref: '#/components/schemas/LogActor'
        authenticationContext:
          $ref: '#/components/schemas/LogAuthenticationContext'
        client:
          $ref: '#/components/schemas/LogClient'
        debugContext:
          $ref: '#/components/schemas/LogDebugContext'
        displayMessage:
          type: string
          readOnly: true
        eventType:
          type: string
          readOnly: true
        legacyEventType:
          type: string
          readOnly: true
        outcome:
          $ref: '#/components/schemas/LogOutcome'
        published:
          type: string
          format: date-time
          readOnly: true
        request:
          $ref: '#/components/schemas/LogRequest'
        securityContext:
          $ref: '#/components/schemas/LogSecurityContext'
        severity:
          $ref: '#/components/schemas/LogSeverity'
        target:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/LogTarget'
        transaction:
          $ref: '#/components/schemas/LogTransaction'
        uuid:
          type: string
          readOnly: true
        version:
          type: string
          readOnly: true
    LogGeographicalContext:
      type: object
      properties:
        city:
          type: string
          readOnly: true
        country:
          type: string
          readOnly: true
        geolocation:
          $ref: '#/components/schemas/LogGeolocation'
        postalCode:
          type: string
          readOnly: true
        state:
          type: string
          readOnly: true
    LogGeolocation:
      type: object
      properties:
        lat:
          type: number
          format: double
          readOnly: true
        lon:
          type: number
          format: double
          readOnly: true
    LogIpAddress:
      type: object
      properties:
        geographicalContext:
          $ref: '#/components/schemas/LogGeographicalContext'
        ip:
          type: string
          readOnly: true
        source:
          type: string
          readOnly: true
        version:
          type: string
          readOnly: true
    LogIssuer:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
    LogOutcome:
      type: object
      properties:
        reason:
          type: string
          readOnly: true
        result:
          type: string
          readOnly: true
    LogRequest:
      type: object
      properties:
        ipChain:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/LogIpAddress'
    LogSecurityContext:
      type: object
      properties:
        asNumber:
          type: integer
          readOnly: true
        asOrg:
          type: string
          readOnly: true
        domain:
          type: string
          readOnly: true
        isProxy:
          type: boolean
          readOnly: true
        isp:
          type: string
          readOnly: true
    LogSeverity:
      type: string
      enum:
        - DEBUG
        - INFO
        - WARN
        - ERROR
    LogTarget:
      type: object
      properties:
        alternateId:
          type: string
          readOnly: true
        detailEntry:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        displayName:
          type: string
          readOnly: true
        id:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
    LogTransaction:
      type: object
      properties:
        detail:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        id:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
    LogUserAgent:
      type: object
      properties:
        browser:
          type: string
          readOnly: true
        os:
          type: string
          readOnly: true
        rawUserAgent:
          type: string
          readOnly: true
    MDMEnrollmentPolicyEnrollment:
      type: string
      enum:
        - OMM
        - ANY_OR_NONE
    MDMEnrollmentPolicyRuleCondition:
      type: object
      properties:
        blockNonSafeAndroid:
          type: boolean
        enrollment:
          $ref: '#/components/schemas/MDMEnrollmentPolicyEnrollment'
    NetworkZone:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/NetworkZoneType'
        id:
          type: string
          readOnly: true
        name:
          type: string
        system:
          type: boolean
        usage:
          $ref: '#/components/schemas/NetworkZoneUsage'
        status:
          $ref: '#/components/schemas/NetworkZoneStatus'
        proxyType:
          type: string
        locations:
          type: array
          items:
            $ref: '#/components/schemas/NetworkZoneLocation'
        gateways:
          type: array
          items:
            $ref: '#/components/schemas/NetworkZoneAddress'
        proxies:
          type: array
          items:
            $ref: '#/components/schemas/NetworkZoneAddress'
        asns:
          type: array
          items:
            type: string
        created:
          type: string
          format: date-time
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
    NetworkZoneAddress:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/NetworkZoneAddressType'
        value:
          type: string
    NetworkZoneAddressType:
      type: string
      enum:
        - CIDR
        - RANGE
    NetworkZoneLocation:
      type: object
      properties:
        country:
          type: string
        region:
          type: string
    NetworkZoneStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
    NetworkZoneType:
      type: string
      enum:
        - IP
        - DYNAMIC
    NetworkZoneUsage:
      type: string
      enum:
        - POLICY
        - BLOCKLIST
    NotificationType:
      type: string
      enum:
        - CONNECTOR_AGENT
        - USER_LOCKED_OUT
        - APP_IMPORT
        - LDAP_AGENT
        - AD_AGENT
        - OKTA_ANNOUNCEMENT
        - OKTA_ISSUE
        - OKTA_UPDATE
        - IWA_AGENT
        - USER_DEPROVISION
        - REPORT_SUSPICIOUS_ACTIVITY
        - RATELIMIT_NOTIFICATION
    OAuth2Actor:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        type:
          type: string
    OAuth2Claim:
      type: object
      properties:
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        alwaysIncludeInToken:
          type: boolean
        claimType:
          $ref: '#/components/schemas/OAuth2ClaimType'
        conditions:
          $ref: '#/components/schemas/OAuth2ClaimConditions'
        group_filter_type:
          $ref: '#/components/schemas/OAuth2ClaimGroupFilterType'
        id:
          type: string
          readOnly: true
        name:
          type: string
        status:
          $ref: '#/components/schemas/LifecycleStatus'
        system:
          type: boolean
        value:
          type: string
        valueType:
          $ref: '#/components/schemas/OAuth2ClaimValueType'
    OAuth2ClaimConditions:
      type: object
      properties:
        scopes:
          type: array
          items:
            type: string
    OAuth2ClaimGroupFilterType:
      type: string
      enum:
        - STARTS_WITH
        - EQUALS
        - CONTAINS
        - REGEX
    OAuth2ClaimType:
      type: string
      enum:
        - IDENTITY
        - RESOURCE
    OAuth2ClaimValueType:
      type: string
      enum:
        - EXPRESSION
        - GROUPS
        - SYSTEM
    OAuth2Client:
      type: object
      properties:
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        client_id:
          type: string
          readOnly: true
        client_name:
          type: string
          readOnly: true
        client_uri:
          type: string
          readOnly: true
        logo_uri:
          type: string
          readOnly: true
    OAuth2RefreshToken:
      type: object
      properties:
        _embedded:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        clientId:
          type: string
        created:
          type: string
          format: date-time
          readOnly: true
        createdBy:
          $ref: '#/components/schemas/OAuth2Actor'
        expiresAt:
          type: string
          format: date-time
          readOnly: true
        id:
          type: string
          readOnly: true
        issuer:
          type: string
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        scopes:
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/GrantOrTokenStatus'
        userId:
          type: string
    OAuth2Scope:
      type: object
      properties:
        consent:
          $ref: '#/components/schemas/OAuth2ScopeConsentType'
        default:
          type: boolean
        description:
          type: string
        displayName:
          type: string
        id:
          type: string
          readOnly: true
        metadataPublish:
          $ref: '#/components/schemas/OAuth2ScopeMetadataPublish'
        name:
          type: string
        system:
          type: boolean
    OAuth2ScopeConsentGrant:
      type: object
      properties:
        _embedded:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        clientId:
          type: string
        userId:
          type: string
        created:
          type: string
          format: date-time
          readOnly: true
        createdBy:
          $ref: '#/components/schemas/OAuth2Actor'
        id:
          type: string
          readOnly: true
        issuer:
          type: string
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        scopeId:
          type: string
        source:
          $ref: '#/components/schemas/OAuth2ScopeConsentGrantSource'
        status:
          $ref: '#/components/schemas/GrantOrTokenStatus'
    OAuth2ScopeConsentGrantSource:
      type: string
      enum:
        - END_USER
        - ADMIN
    OAuth2ScopeConsentType:
      type: string
      enum:
        - REQUIRED
        - IMPLICIT
        - ADMIN
    OAuth2ScopeMetadataPublish:
      type: string
      enum:
        - ALL_CLIENTS
        - NO_CLIENTS
    OAuth2ScopesMediationPolicyRuleCondition:
      type: object
      properties:
        include:
          type: array
          items:
            type: string
    OAuth2Token:
      type: object
      properties:
        _embedded:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        clientId:
          type: string
        created:
          type: string
          format: date-time
          readOnly: true
        expiresAt:
          type: string
          format: date-time
          readOnly: true
        id:
          type: string
          readOnly: true
        issuer:
          type: string
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        scopes:
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/GrantOrTokenStatus'
        userId:
          type: string
    OAuthApplicationCredentials:
      allOf:
        - $ref: '#/components/schemas/ApplicationCredentials'
        - type: object
          properties:
            oauthClient:
              $ref: '#/components/schemas/ApplicationCredentialsOAuthClient'
    OAuthEndpointAuthenticationMethod:
      type: string
      enum:
        - none
        - client_secret_post
        - client_secret_basic
        - client_secret_jwt
        - private_key_jwt
    OAuthGrantType:
      type: string
      enum:
        - authorization_code
        - implicit
        - password
        - refresh_token
        - client_credentials
    OAuthResponseType:
      type: string
      enum:
        - code
        - token
        - id_token
    OktaSignOnPolicy:
      allOf:
        - $ref: '#/components/schemas/Policy'
        - type: object
          properties:
            conditions:
              $ref: '#/components/schemas/OktaSignOnPolicyConditions'
    OktaSignOnPolicyConditions:
      allOf:
        - $ref: '#/components/schemas/PolicyRuleConditions'
        - type: object
          properties:
            people:
              $ref: '#/components/schemas/PolicyPeopleCondition'
    OktaSignOnPolicyFactorPromptMode:
      type: string
      enum:
        - ALWAYS
        - DEVICE
        - SESSION
    OktaSignOnPolicyRule:
      allOf:
        - $ref: '#/components/schemas/PolicyRule'
        - type: object
          properties:
            actions:
              $ref: '#/components/schemas/OktaSignOnPolicyRuleActions'
            conditions:
              $ref: '#/components/schemas/OktaSignOnPolicyRuleConditions'
            name:
              type: string
    OktaSignOnPolicyRuleActions:
      allOf:
        - $ref: '#/components/schemas/PolicyRuleActions'
        - type: object
          properties:
            signon:
              $ref: '#/components/schemas/OktaSignOnPolicyRuleSignonActions'
    OktaSignOnPolicyRuleConditions:
      allOf:
        - $ref: '#/components/schemas/PolicyRuleConditions'
        - type: object
          properties:
            authContext:
              $ref: '#/components/schemas/PolicyRuleAuthContextCondition'
            network:
              $ref: '#/components/schemas/PolicyNetworkCondition'
            people:
              $ref: '#/components/schemas/PolicyPeopleCondition'
    OktaSignOnPolicyRuleSignonActions:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/PolicyAccess'
        factorLifetime:
          type: integer
        factorPromptMode:
          $ref: '#/components/schemas/OktaSignOnPolicyFactorPromptMode'
        rememberDeviceByDefault:
          type: boolean
          default: false
        requireFactor:
          type: boolean
          default: false
        session:
          $ref: '#/components/schemas/OktaSignOnPolicyRuleSignonSessionActions'
    OktaSignOnPolicyRuleSignonSessionActions:
      type: object
      properties:
        maxSessionIdleMinutes:
          type: integer
        maxSessionLifetimeMinutes:
          type: integer
        usePersistentCookie:
          type: boolean
          default: false
    OpenIdConnectApplication:
      x-okta-defined-as:
        name: oidc_client
      allOf:
        - $ref: '#/components/schemas/Application'
        - type: object
          properties:
            credentials:
              $ref: '#/components/schemas/OAuthApplicationCredentials'
            name:
              type: string
              default: oidc_client
            settings:
              $ref: '#/components/schemas/OpenIdConnectApplicationSettings'
    OpenIdConnectApplicationConsentMethod:
      type: string
      enum:
        - REQUIRED
        - TRUSTED
    OpenIdConnectApplicationIdpInitiatedLogin:
      type: object
      properties:
        mode:
          type: string
        default_scope:
          type: array
          items:
            type: string
    OpenIdConnectApplicationIssuerMode:
      type: string
      enum:
        - CUSTOM_URL
        - ORG_URL
    OpenIdConnectApplicationSettings:
      allOf:
        - $ref: '#/components/schemas/ApplicationSettings'
        - type: object
          properties:
            oauthClient:
              $ref: '#/components/schemas/OpenIdConnectApplicationSettingsClient'
    OpenIdConnectApplicationSettingsClient:
      type: object
      properties:
        application_type:
          $ref: '#/components/schemas/OpenIdConnectApplicationType'
        client_uri:
          type: string
        consent_method:
          $ref: '#/components/schemas/OpenIdConnectApplicationConsentMethod'
        grant_types:
          type: array
          items:
            $ref: '#/components/schemas/OAuthGrantType'
        initiate_login_uri:
          type: string
        issuer_mode:
          $ref: '#/components/schemas/OpenIdConnectApplicationIssuerMode'
        idp_initiated_login:
          $ref: '#/components/schemas/OpenIdConnectApplicationIdpInitiatedLogin'
        logo_uri:
          type: string
        policy_uri:
          type: string
        post_logout_redirect_uris:
          type: array
          items:
            type: string
        redirect_uris:
          type: array
          items:
            type: string
        wildcard_redirect:
          type: string
        response_types:
          type: array
          items:
            $ref: '#/components/schemas/OAuthResponseType'
        refresh_token:
          $ref: '#/components/schemas/OpenIdConnectApplicationSettingsRefreshToken'
        tos_uri:
          type: string
        jwks:
          $ref: '#/components/schemas/OpenIdConnectApplicationSettingsClientKeys'
    OpenIdConnectApplicationSettingsClientKeys:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/JsonWebKey'
    OpenIdConnectApplicationSettingsRefreshToken:
      type: object
      properties:
        leeway:
          type: integer
        rotation_type:
          $ref: '#/components/schemas/OpenIdConnectRefreshTokenRotationType'
    OpenIdConnectApplicationType:
      type: string
      enum:
        - web
        - native
        - browser
        - service
    OpenIdConnectRefreshTokenRotationType:
      type: string
      enum:
        - rotate
        - static
    Org2OrgApplication:
      x-okta-defined-as:
        name: okta_org2org
      allOf:
        - $ref: '#/components/schemas/SamlApplication'
        - type: object
          properties:
            name:
              type: string
              default: okta_org2org
            settings:
              $ref: '#/components/schemas/Org2OrgApplicationSettings'
    Org2OrgApplicationSettings:
      allOf:
        - $ref: '#/components/schemas/SamlApplicationSettings'
        - type: object
          properties:
            app:
              $ref: '#/components/schemas/Org2OrgApplicationSettingsApp'
    Org2OrgApplicationSettingsApp:
      allOf:
        - $ref: '#/components/schemas/ApplicationSettingsApplication'
        - type: object
          properties:
            acsUrl:
              type: string
            audRestriction:
              type: string
            baseUrl:
              type: string
    OrgContactType:
      type: string
      enum:
        - BILLING
        - TECHNICAL
    OrgContactTypeObj:
      type: object
      properties:
        _links:
          additionalProperties:
            type: object
        contactType:
          $ref: '#/components/schemas/OrgContactType'
    OrgContactUser:
      type: object
      properties:
        _links:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        userId:
          type: string
    OrgOktaCommunicationSetting:
      type: object
      properties:
        _links:
          additionalProperties:
            type: object
        optOutEmailUsers:
          type: boolean
          readOnly: true
    OrgOktaSupportSetting:
      type: string
      enum:
        - DISABLED
        - ENABLED
    OrgOktaSupportSettingsObj:
      type: object
      properties:
        _links:
          additionalProperties:
            type: object
        expiration:
          format: date-time
          type: string
          readOnly: true
        support:
          $ref: '#/components/schemas/OrgOktaSupportSetting'
    OrgPreferences:
      type: object
      properties:
        _links:
          additionalProperties:
            type: object
        showEndUserFooter:
          type: boolean
          readOnly: true
    OrgSetting:
      type: object
      properties:
        _links:
          additionalProperties:
            type: object
        address1:
          type: string
        address2:
          type: string
        city:
          type: string
        companyName:
          type: string
        country:
          type: string
        created:
          format: date-time
          readOnly: true
          type: string
        endUserSupportHelpURL:
          type: string
        expiresAt:
          format: date-time
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        lastUpdated:
          format: date-time
          readOnly: true
          type: string
        phoneNumber:
          type: string
        postalCode:
          type: string
        state:
          type: string
        status:
          readOnly: true
          type: string
        subdomain:
          readOnly: true
          type: string
        supportPhoneNumber:
          type: string
        website:
          type: string
    PasswordCredential:
      type: object
      properties:
        hash:
          $ref: '#/components/schemas/PasswordCredentialHash'
        hook:
          $ref: '#/components/schemas/PasswordCredentialHook'
        value:
          type: string
          format: password
    PasswordCredentialHash:
      type: object
      properties:
        algorithm:
          $ref: '#/components/schemas/PasswordCredentialHashAlgorithm'
        salt:
          type: string
        saltOrder:
          type: string
        value:
          type: string
        workFactor:
          type: integer
    PasswordCredentialHashAlgorithm:
      type: string
      enum:
        - BCRYPT
        - SHA-512
        - SHA-256
        - SHA-1
        - MD5
    PasswordCredentialHook:
      type: object
      properties:
        type:
          type: string
    PasswordDictionary:
      type: object
      properties:
        common:
          $ref: '#/components/schemas/PasswordDictionaryCommon'
    PasswordDictionaryCommon:
      type: object
      properties:
        exclude:
          type: boolean
          default: false
    PasswordExpirationPolicyRuleCondition:
      type: object
      properties:
        number:
          type: integer
        unit:
          type: string
    PasswordPolicy:
      allOf:
        - $ref: '#/components/schemas/Policy'
        - type: object
          properties:
            conditions:
              $ref: '#/components/schemas/PasswordPolicyConditions'
            settings:
              $ref: '#/components/schemas/PasswordPolicySettings'
    PasswordPolicyAuthenticationProviderCondition:
      type: object
      properties:
        include:
          type: array
          items:
            type: string
        provider:
          $ref: '#/components/schemas/PasswordPolicyAuthenticationProviderType'
    PasswordPolicyAuthenticationProviderType:
      type: string
      enum:
        - ACTIVE_DIRECTORY
        - ANY
        - LDAP
        - OKTA
    PasswordPolicyConditions:
      allOf:
        - $ref: '#/components/schemas/PolicyRuleConditions'
        - type: object
          properties:
            authProvider:
              $ref: '#/components/schemas/PasswordPolicyAuthenticationProviderCondition'
            people:
              $ref: '#/components/schemas/PolicyPeopleCondition'
    PasswordPolicyDelegationSettings:
      type: object
      properties:
        options:
          $ref: '#/components/schemas/PasswordPolicyDelegationSettingsOptions'
    PasswordPolicyDelegationSettingsOptions:
      type: object
      properties:
        skipUnlock:
          type: boolean
    PasswordPolicyPasswordSettings:
      type: object
      properties:
        age:
          $ref: '#/components/schemas/PasswordPolicyPasswordSettingsAge'
        complexity:
          $ref: '#/components/schemas/PasswordPolicyPasswordSettingsComplexity'
        lockout:
          $ref: '#/components/schemas/PasswordPolicyPasswordSettingsLockout'
    PasswordPolicyPasswordSettingsAge:
      type: object
      properties:
        expireWarnDays:
          type: integer
        historyCount:
          type: integer
        maxAgeDays:
          type: integer
        minAgeMinutes:
          type: integer
    PasswordPolicyPasswordSettingsComplexity:
      type: object
      properties:
        dictionary:
          $ref: '#/components/schemas/PasswordDictionary'
        excludeAttributes:
          type: array
          items:
            type: string
        excludeUsername:
          type: boolean
          default: true
        minLength:
          type: integer
        minLowerCase:
          type: integer
        minNumber:
          type: integer
        minSymbol:
          type: integer
        minUpperCase:
          type: integer
    PasswordPolicyPasswordSettingsLockout:
      type: object
      properties:
        autoUnlockMinutes:
          type: integer
        maxAttempts:
          type: integer
        showLockoutFailures:
          type: boolean
        userLockoutNotificationChannels:
          type: array
          items:
            type: string
    PasswordPolicyRecoveryEmail:
      type: object
      properties:
        properties:
          $ref: '#/components/schemas/PasswordPolicyRecoveryEmailProperties'
        status:
          $ref: '#/components/schemas/LifecycleStatus'
    PasswordPolicyRecoveryEmailProperties:
      type: object
      properties:
        recoveryToken:
          $ref: '#/components/schemas/PasswordPolicyRecoveryEmailRecoveryToken'
    PasswordPolicyRecoveryEmailRecoveryToken:
      type: object
      properties:
        tokenLifetimeMinutes:
          type: integer
    PasswordPolicyRecoveryFactorSettings:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/LifecycleStatus'
    PasswordPolicyRecoveryFactors:
      type: object
      properties:
        okta_call:
          $ref: '#/components/schemas/PasswordPolicyRecoveryFactorSettings'
        okta_email:
          $ref: '#/components/schemas/PasswordPolicyRecoveryEmail'
        okta_sms:
          $ref: '#/components/schemas/PasswordPolicyRecoveryFactorSettings'
        recovery_question:
          $ref: '#/components/schemas/PasswordPolicyRecoveryQuestion'
    PasswordPolicyRecoveryQuestion:
      type: object
      properties:
        properties:
          $ref: '#/components/schemas/PasswordPolicyRecoveryQuestionProperties'
        status:
          $ref: '#/components/schemas/LifecycleStatus'
    PasswordPolicyRecoveryQuestionComplexity:
      type: object
      properties:
        minLength:
          type: integer
          readOnly: true
    PasswordPolicyRecoveryQuestionProperties:
      type: object
      properties:
        complexity:
          $ref: '#/components/schemas/PasswordPolicyRecoveryQuestionComplexity'
    PasswordPolicyRecoverySettings:
      type: object
      properties:
        factors:
          $ref: '#/components/schemas/PasswordPolicyRecoveryFactors'
    PasswordPolicyRule:
      allOf:
        - $ref: '#/components/schemas/PolicyRule'
        - type: object
          properties:
            actions:
              $ref: '#/components/schemas/PasswordPolicyRuleActions'
            conditions:
              $ref: '#/components/schemas/PasswordPolicyRuleConditions'
            name:
              type: string
    PasswordPolicyRuleAction:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/PolicyAccess'
    PasswordPolicyRuleActions:
      allOf:
        - $ref: '#/components/schemas/PolicyRuleActions'
        - type: object
          properties:
            passwordChange:
              $ref: '#/components/schemas/PasswordPolicyRuleAction'
            selfServicePasswordReset:
              $ref: '#/components/schemas/PasswordPolicyRuleAction'
            selfServiceUnlock:
              $ref: '#/components/schemas/PasswordPolicyRuleAction'
    PasswordPolicyRuleConditions:
      allOf:
        - $ref: '#/components/schemas/PolicyRuleConditions'
        - type: object
          properties:
            network:
              $ref: '#/components/schemas/PolicyNetworkCondition'
            people:
              $ref: '#/components/schemas/PolicyPeopleCondition'
    PasswordPolicySettings:
      type: object
      properties:
        delegation:
          $ref: '#/components/schemas/PasswordPolicyDelegationSettings'
        password:
          $ref: '#/components/schemas/PasswordPolicyPasswordSettings'
        recovery:
          $ref: '#/components/schemas/PasswordPolicyRecoverySettings'
    PasswordSettingObject:
      type: object
      properties:
        change:
          $ref: '#/components/schemas/ChangeEnum'
        seed:
          $ref: '#/components/schemas/SeedEnum'
        status:
          $ref: '#/components/schemas/EnabledStatus'
    PlatformConditionEvaluatorPlatform:
      type: object
      properties:
        os:
          $ref: '#/components/schemas/PlatformConditionEvaluatorPlatformOperatingSystem'
        type:
          $ref: '#/components/schemas/PolicyPlatformType'
    PlatformConditionEvaluatorPlatformOperatingSystem:
      type: object
      properties:
        expression:
          type: string
        type:
          $ref: '#/components/schemas/PolicyPlatformOperatingSystemType'
        version:
          $ref: '#/components/schemas/PlatformConditionEvaluatorPlatformOperatingSystemVersion'
    PlatformConditionEvaluatorPlatformOperatingSystemVersion:
      type: object
      properties:
        matchType:
          $ref: '#/components/schemas/PlatformConditionOperatingSystemVersionMatchType'
        value:
          type: string
    PlatformConditionOperatingSystemVersionMatchType:
      type: string
      enum:
        - EXPRESSION
        - SEMVER
    PlatformPolicyRuleCondition:
      type: object
      properties:
        exclude:
          type: array
          items:
            $ref: '#/components/schemas/PlatformConditionEvaluatorPlatform'
        include:
          type: array
          items:
            $ref: '#/components/schemas/PlatformConditionEvaluatorPlatform'
    Policy:
      type: object
      properties:
        _embedded:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        conditions:
          $ref: '#/components/schemas/PolicyRuleConditions'
        created:
          type: string
          format: date-time
          readOnly: true
        description:
          type: string
        id:
          type: string
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
        priority:
          type: integer
        status:
          $ref: '#/components/schemas/LifecycleStatus'
        system:
          type: boolean
        type:
          $ref: '#/components/schemas/PolicyType'
      discriminator:
        propertyName: type
        mapping:
          ACCESS_POLICY: '#/components/schemas/AccessPolicy'
          IDP_DISCOVERY: '#/components/schemas/IdentityProviderPolicy'
          OAUTH_AUTHORIZATION_POLICY: '#/components/schemas/AuthorizationServerPolicy'
          OKTA_SIGN_ON: '#/components/schemas/OktaSignOnPolicy'
          PASSWORD: '#/components/schemas/PasswordPolicy'
          PROFILE_ENROLLMENT: '#/components/schemas/ProfileEnrollmentPolicy'
    PolicyAccess:
      type: string
      enum:
        - ALLOW
        - DENY
    PolicyAccountLink:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/PolicyAccountLinkAction'
        filter:
          $ref: '#/components/schemas/PolicyAccountLinkFilter'
    PolicyAccountLinkAction:
      type: string
      enum:
        - AUTO
        - DISABLED
    PolicyAccountLinkFilter:
      type: object
      properties:
        groups:
          $ref: '#/components/schemas/PolicyAccountLinkFilterGroups'
    PolicyAccountLinkFilterGroups:
      type: object
      properties:
        include:
          type: array
          items:
            type: string
    PolicyNetworkCondition:
      type: object
      properties:
        connection:
          $ref: '#/components/schemas/PolicyNetworkConnection'
        exclude:
          type: array
          items:
            type: string
        include:
          type: array
          items:
            type: string
    PolicyNetworkConnection:
      type: string
      enum:
        - ANYWHERE
        - ZONE
    PolicyPeopleCondition:
      type: object
      properties:
        groups:
          $ref: '#/components/schemas/GroupCondition'
        users:
          $ref: '#/components/schemas/UserCondition'
    PolicyPlatformOperatingSystemType:
      type: string
      enum:
        - ANDROID
        - IOS
        - WINDOWS
        - OSX
        - OTHER
        - ANY
    PolicyPlatformType:
      type: string
      enum:
        - DESKTOP
        - MOBILE
        - OTHER
        - ANY
    PolicyRule:
      type: object
      properties:
        created:
          type: string
          format: date-time
          readOnly: true
        id:
          type: string
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        priority:
          type: integer
        status:
          $ref: '#/components/schemas/LifecycleStatus'
        system:
          type: boolean
          default: false
        type:
          $ref: '#/components/schemas/PolicyRuleType'
        name:
          type: string
        conditions:
          $ref: '#/components/schemas/PolicyRuleConditions'
        actions:
          $ref: '#/components/schemas/PolicyRuleActions'
      discriminator:
        propertyName: type
        mapping:
          ACCESS_POLICY: '#/components/schemas/AccessPolicyRule'
          PASSWORD: '#/components/schemas/PasswordPolicyRule'
          PROFILE_ENROLLMENT: '#/components/schemas/ProfileEnrollmentPolicyRule'
          RESOURCE_ACCESS: '#/components/schemas/AuthorizationServerPolicyRule'
          SIGN_ON: '#/components/schemas/OktaSignOnPolicyRule'
    PolicyRuleActions:
      type: object
      properties:
        enroll:
          $ref: '#/components/schemas/PolicyRuleActionsEnroll'
        signon:
          $ref: '#/components/schemas/OktaSignOnPolicyRuleSignonActions'
        passwordChange:
          $ref: '#/components/schemas/PasswordPolicyRuleAction'
        selfServicePasswordReset:
          $ref: '#/components/schemas/PasswordPolicyRuleAction'
        selfServiceUnlock:
          $ref: '#/components/schemas/PasswordPolicyRuleAction'
    PolicyRuleActionsEnroll:
      type: object
      properties:
        self:
          $ref: '#/components/schemas/PolicyRuleActionsEnrollSelf'
    PolicyRuleActionsEnrollSelf:
      type: string
      enum:
        - CHALLENGE
        - LOGIN
        - NEVER
    PolicyRuleAuthContextCondition:
      type: object
      properties:
        authType:
          $ref: '#/components/schemas/PolicyRuleAuthContextType'
    PolicyRuleAuthContextType:
      type: string
      enum:
        - ANY
        - RADIUS
    PolicyRuleConditions:
      type: object
      properties:
        app:
          $ref: '#/components/schemas/AppAndInstancePolicyRuleCondition'
        apps:
          $ref: '#/components/schemas/AppInstancePolicyRuleCondition'
        authContext:
          $ref: '#/components/schemas/PolicyRuleAuthContextCondition'
        authProvider:
          $ref: '#/components/schemas/PasswordPolicyAuthenticationProviderCondition'
        beforeScheduledAction:
          $ref: '#/components/schemas/BeforeScheduledActionPolicyRuleCondition'
        clients:
          $ref: '#/components/schemas/ClientPolicyCondition'
        context:
          $ref: '#/components/schemas/ContextPolicyRuleCondition'
        device:
          $ref: '#/components/schemas/DevicePolicyRuleCondition'
        grantTypes:
          $ref: '#/components/schemas/GrantTypePolicyRuleCondition'
        groups:
          $ref: '#/components/schemas/GroupPolicyRuleCondition'
        identityProvider:
          $ref: '#/components/schemas/IdentityProviderPolicyRuleCondition'
        mdmEnrollment:
          $ref: '#/components/schemas/MDMEnrollmentPolicyRuleCondition'
        network:
          $ref: '#/components/schemas/PolicyNetworkCondition'
        people:
          $ref: '#/components/schemas/PolicyPeopleCondition'
        platform:
          $ref: '#/components/schemas/PlatformPolicyRuleCondition'
        risk:
          $ref: '#/components/schemas/RiskPolicyRuleCondition'
        riskScore:
          $ref: '#/components/schemas/RiskScorePolicyRuleCondition'
        scopes:
          $ref: '#/components/schemas/OAuth2ScopesMediationPolicyRuleCondition'
        userIdentifier:
          $ref: '#/components/schemas/UserIdentifierPolicyRuleCondition'
        userStatus:
          $ref: '#/components/schemas/UserStatusPolicyRuleCondition'
        users:
          $ref: '#/components/schemas/UserPolicyRuleCondition'
    PolicyRuleType:
      type: string
      enum:
        - SIGN_ON
        - PASSWORD
        - IDP_DISCOVERY
        - MFA_ENROLL
        - RESOURCE_ACCESS
        - PROFILE_ENROLLMENT
        - ACCESS_POLICY
    PolicySubject:
      type: object
      properties:
        filter:
          type: string
        format:
          type: array
          items:
            type: string
        matchAttribute:
          type: string
        matchType:
          $ref: '#/components/schemas/PolicySubjectMatchType'
        userNameTemplate:
          $ref: '#/components/schemas/PolicyUserNameTemplate'
    PolicySubjectMatchType:
      type: string
      enum:
        - USERNAME
        - EMAIL
        - USERNAME_OR_EMAIL
        - CUSTOM_ATTRIBUTE
    PolicyType:
      type: string
      enum:
        - OAUTH_AUTHORIZATION_POLICY
        - OKTA_SIGN_ON
        - MFA_ENROLL
        - PASSWORD
        - IDP_DISCOVERY
        - PROFILE_ENROLLMENT
        - ACCESS_POLICY
    PolicyUserNameTemplate:
      type: object
      properties:
        template:
          type: string
    PolicyUserStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - PENDING
        - DELETED
        - EXPIRED_PASSWORD
        - ACTIVATING
        - SUSPENDED
        - DELETING
    PossessionConstraint:
      allOf:
        - $ref: '#/components/schemas/AccessPolicyConstraint'
        - type: object
          properties:
            deviceBound:
              type: string
            hardwareProtection:
              type: string
            phishingResistant:
              type: string
            userPresence:
              type: string
    PreRegistrationInlineHook:
      type: object
      properties:
        inlineHookId:
          type: string
    ProfileEnrollmentPolicy:
      allOf:
        - $ref: '#/components/schemas/Policy'
    ProfileEnrollmentPolicyRule:
      allOf:
        - $ref: '#/components/schemas/PolicyRule'
        - type: object
          properties:
            actions:
              $ref: '#/components/schemas/ProfileEnrollmentPolicyRuleActions'
            name:
              type: string
    ProfileEnrollmentPolicyRuleAction:
      type: object
      properties:
        access:
          type: string
        activationRequirements:
          $ref: '#/components/schemas/ProfileEnrollmentPolicyRuleActivationRequirement'
        preRegistrationInlineHooks:
          items:
            $ref: '#/components/schemas/PreRegistrationInlineHook'
          type: array
        profileAttributes:
          items:
            $ref: '#/components/schemas/ProfileEnrollmentPolicyRuleProfileAttribute'
          type: array
        targetGroupIds:
          items:
            type: string
          type: array
        unknownUserAction:
          type: string
    ProfileEnrollmentPolicyRuleActions:
      allOf:
        - $ref: '#/components/schemas/PolicyRuleActions'
        - type: object
          properties:
            profileEnrollment:
              $ref: '#/components/schemas/ProfileEnrollmentPolicyRuleAction'
    ProfileEnrollmentPolicyRuleActivationRequirement:
      type: object
      properties:
        emailVerification:
          type: boolean
    ProfileEnrollmentPolicyRuleProfileAttribute:
      type: object
      properties:
        label:
          type: string
        name:
          type: string
        required:
          type: boolean
    ProfileMapping:
      type: object
      properties:
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        id:
          type: string
          readOnly: true
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ProfileMappingProperty'
          readOnly: true
        source:
          $ref: '#/components/schemas/ProfileMappingSource'
        target:
          $ref: '#/components/schemas/ProfileMappingSource'
    ProfileMappingProperty:
      type: object
      properties:
        expression:
          type: string
        pushStatus:
          $ref: '#/components/schemas/ProfileMappingPropertyPushStatus'
    ProfileMappingPropertyPushStatus:
      type: string
      enum:
        - PUSH
        - DONT_PUSH
    ProfileMappingSource:
      type: object
      properties:
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        id:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        type:
          type: string
          readOnly: true
    ProfileSettingObject:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/EnabledStatus'
    Protocol:
      type: object
      properties:
        algorithms:
          $ref: '#/components/schemas/ProtocolAlgorithms'
        credentials:
          $ref: '#/components/schemas/IdentityProviderCredentials'
        endpoints:
          $ref: '#/components/schemas/ProtocolEndpoints'
        issuer:
          $ref: '#/components/schemas/ProtocolEndpoint'
        relayState:
          $ref: '#/components/schemas/ProtocolRelayState'
        scopes:
          type: array
          items:
            type: string
        settings:
          $ref: '#/components/schemas/ProtocolSettings'
        type:
          $ref: '#/components/schemas/ProtocolType'
    ProtocolAlgorithmType:
      type: object
      properties:
        signature:
          $ref: '#/components/schemas/ProtocolAlgorithmTypeSignature'
    ProtocolAlgorithmTypeSignature:
      type: object
      properties:
        algorithm:
          type: string
        scope:
          $ref: '#/components/schemas/ProtocolAlgorithmTypeSignatureScope'
    ProtocolAlgorithmTypeSignatureScope:
      type: string
      enum:
        - RESPONSE
        - TOKEN
        - ANY
        - REQUEST
        - NONE
    ProtocolAlgorithms:
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ProtocolAlgorithmType'
        response:
          $ref: '#/components/schemas/ProtocolAlgorithmType'
    ProtocolEndpoint:
      type: object
      properties:
        binding:
          $ref: '#/components/schemas/ProtocolEndpointBinding'
        destination:
          type: string
        type:
          $ref: '#/components/schemas/ProtocolEndpointType'
        url:
          type: string
    ProtocolEndpointBinding:
      type: string
      enum:
        - HTTP-POST
        - HTTP-REDIRECT
    ProtocolEndpointType:
      type: string
      enum:
        - INSTANCE
        - ORG
    ProtocolEndpoints:
      type: object
      properties:
        acs:
          $ref: '#/components/schemas/ProtocolEndpoint'
        authorization:
          $ref: '#/components/schemas/ProtocolEndpoint'
        jwks:
          $ref: '#/components/schemas/ProtocolEndpoint'
        metadata:
          $ref: '#/components/schemas/ProtocolEndpoint'
        slo:
          $ref: '#/components/schemas/ProtocolEndpoint'
        sso:
          $ref: '#/components/schemas/ProtocolEndpoint'
        token:
          $ref: '#/components/schemas/ProtocolEndpoint'
        userInfo:
          $ref: '#/components/schemas/ProtocolEndpoint'
    ProtocolRelayState:
      type: object
      properties:
        format:
          $ref: '#/components/schemas/ProtocolRelayStateFormat'
    ProtocolRelayStateFormat:
      type: string
      enum:
        - OPAQUE
        - FROM_URL
    ProtocolSettings:
      type: object
      properties:
        nameFormat:
          type: string
    ProtocolType:
      type: string
      enum:
        - SAML2
        - OIDC
        - OAUTH2
        - MTLS
    Provisioning:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/ProvisioningAction'
        conditions:
          $ref: '#/components/schemas/ProvisioningConditions'
        groups:
          $ref: '#/components/schemas/ProvisioningGroups'
        profileMaster:
          type: boolean
    ProvisioningAction:
      type: string
      enum:
        - AUTO
        - CALLOUT
        - DISABLED
    ProvisioningConditions:
      type: object
      properties:
        deprovisioned:
          $ref: '#/components/schemas/ProvisioningDeprovisionedCondition'
        suspended:
          $ref: '#/components/schemas/ProvisioningSuspendedCondition'
    ProvisioningConnection:
      type: object
      properties:
        _links:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        authScheme:
          $ref: '#/components/schemas/ProvisioningConnectionAuthScheme'
        status:
          $ref: '#/components/schemas/ProvisioningConnectionStatus'
    ProvisioningConnectionAuthScheme:
      type: string
      enum:
        - TOKEN
        - UNKNOWN
    ProvisioningConnectionProfile:
      type: object
      properties:
        authScheme:
          $ref: '#/components/schemas/ProvisioningConnectionAuthScheme'
        token:
          type: string
    ProvisioningConnectionRequest:
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/ProvisioningConnectionProfile'
    ProvisioningConnectionStatus:
      type: string
      enum:
        - DISABLED
        - ENABLED
        - UNKNOWN
    ProvisioningDeprovisionedAction:
      type: string
      enum:
        - NONE
        - REACTIVATE
    ProvisioningDeprovisionedCondition:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/ProvisioningDeprovisionedAction'
    ProvisioningGroups:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/ProvisioningGroupsAction'
        assignments:
          type: array
          items:
            type: string
        filter:
          type: array
          items:
            type: string
        sourceAttributeName:
          type: string
    ProvisioningGroupsAction:
      type: string
      enum:
        - NONE
        - APPEND
        - SYNC
        - ASSIGN
    ProvisioningSuspendedAction:
      type: string
      enum:
        - NONE
        - UNSUSPEND
    ProvisioningSuspendedCondition:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/ProvisioningSuspendedAction'
    PushUserFactor:
      allOf:
        - $ref: '#/components/schemas/UserFactor'
        - type: object
          properties:
            expiresAt:
              type: string
              format: date-time
            factorResult:
              $ref: '#/components/schemas/FactorResultType'
            profile:
              $ref: '#/components/schemas/PushUserFactorProfile'
    PushUserFactorProfile:
      type: object
      properties:
        credentialId:
          type: string
        deviceToken:
          type: string
        deviceType:
          type: string
        name:
          type: string
        platform:
          type: string
        version:
          type: string
    RecoveryQuestionCredential:
      type: object
      properties:
        answer:
          type: string
        question:
          type: string
    RequiredEnum:
      type: string
      enum:
        - ALWAYS
        - HIGH_RISK_ONLY
        - NEVER
    ResetPasswordToken:
      type: object
      properties:
        resetPasswordUrl:
          type: string
          readOnly: true
    ResponseLinks:
      type: object
    RiskPolicyRuleCondition:
      type: object
      properties:
        behaviors:
          uniqueItems: true
          type: array
          items:
            type: string
    RiskScorePolicyRuleCondition:
      type: object
      properties:
        level:
          type: string
    Role:
      type: object
      properties:
        _embedded:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        assignmentType:
          $ref: '#/components/schemas/RoleAssignmentType'
        created:
          type: string
          format: date-time
          readOnly: true
        description:
          type: string
        id:
          type: string
          readOnly: true
        label:
          type: string
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        status:
          $ref: '#/components/schemas/LifecycleStatus'
        type:
          $ref: '#/components/schemas/RoleType'
    RoleAssignmentType:
      type: string
      enum:
        - GROUP
        - USER
    RoleType:
      type: string
      enum:
        - SUPER_ADMIN
        - ORG_ADMIN
        - APP_ADMIN
        - USER_ADMIN
        - HELP_DESK_ADMIN
        - READ_ONLY_ADMIN
        - MOBILE_ADMIN
        - API_ACCESS_MANAGEMENT_ADMIN
        - REPORT_ADMIN
        - GROUP_MEMBERSHIP_ADMIN
    SamlApplication:
      allOf:
        - $ref: '#/components/schemas/Application'
        - type: object
          properties:
            settings:
              $ref: '#/components/schemas/SamlApplicationSettings'
      discriminator:
        propertyName: name
        mapping:
          okta_org2org: '#/components/schemas/Org2OrgApplication'
    SamlApplicationSettings:
      allOf:
        - $ref: '#/components/schemas/ApplicationSettings'
        - type: object
          properties:
            signOn:
              $ref: '#/components/schemas/SamlApplicationSettingsSignOn'
    SamlApplicationSettingsSignOn:
      type: object
      properties:
        allowMultipleAcsEndpoints:
          type: boolean
        acsEndpoints:
          type: array
          items:
            $ref: '#/components/schemas/AcsEndpoint'
        assertionSigned:
          type: boolean
        attributeStatements:
          type: array
          items:
            $ref: '#/components/schemas/SamlAttributeStatement'
        audience:
          type: string
        audienceOverride:
          type: string
        authnContextClassRef:
          type: string
        defaultRelayState:
          type: string
        destination:
          type: string
        destinationOverride:
          type: string
        digestAlgorithm:
          type: string
        honorForceAuthn:
          type: boolean
        idpIssuer:
          type: string
        inlineHooks:
          items:
            $ref: '#/components/schemas/SignOnInlineHook'
          type: array
        recipient:
          type: string
        recipientOverride:
          type: string
        requestCompressed:
          type: boolean
        responseSigned:
          type: boolean
        signatureAlgorithm:
          type: string
        slo:
          $ref: '#/components/schemas/SingleLogout'
        spIssuer:
          type: string
        ssoAcsUrl:
          type: string
        ssoAcsUrlOverride:
          type: string
        spCertificate:
          $ref: '#/components/schemas/SpCertificate'
        subjectNameIdFormat:
          type: string
        subjectNameIdTemplate:
          type: string
    SamlAttributeStatement:
      type: object
      properties:
        name:
          type: string
        namespace:
          type: string
        type:
          type: string
        filterType:
          type: string
        filterValue:
          type: string
        values:
          type: array
          items:
            type: string
    ScheduledUserLifecycleAction:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/PolicyUserStatus'
    SchemeApplicationCredentials:
      allOf:
        - $ref: '#/components/schemas/ApplicationCredentials'
        - type: object
          properties:
            password:
              $ref: '#/components/schemas/PasswordCredential'
            revealPassword:
              type: boolean
            scheme:
              $ref: '#/components/schemas/ApplicationCredentialsScheme'
            signing:
              $ref: '#/components/schemas/ApplicationCredentialsSigning'
            userName:
              type: string
    SecurePasswordStoreApplication:
      x-okta-defined-as:
        name: template_sps
      allOf:
        - $ref: '#/components/schemas/Application'
        - type: object
          properties:
            credentials:
              $ref: '#/components/schemas/SchemeApplicationCredentials'
            name:
              type: string
              default: template_sps
            settings:
              $ref: '#/components/schemas/SecurePasswordStoreApplicationSettings'
    SecurePasswordStoreApplicationSettings:
      allOf:
        - $ref: '#/components/schemas/ApplicationSettings'
        - type: object
          properties:
            app:
              $ref: '#/components/schemas/SecurePasswordStoreApplicationSettingsApplication'
    SecurePasswordStoreApplicationSettingsApplication:
      allOf:
        - $ref: '#/components/schemas/ApplicationSettingsApplication'
        - type: object
          properties:
            optionalField1:
              type: string
            optionalField1Value:
              type: string
            optionalField2:
              type: string
            optionalField2Value:
              type: string
            optionalField3:
              type: string
            optionalField3Value:
              type: string
            passwordField:
              type: string
            url:
              type: string
            usernameField:
              type: string
    SecurityQuestion:
      type: object
      properties:
        answer:
          type: string
        question:
          type: string
        questionText:
          type: string
    SecurityQuestionUserFactor:
      allOf:
        - $ref: '#/components/schemas/UserFactor'
        - type: object
          properties:
            profile:
              $ref: '#/components/schemas/SecurityQuestionUserFactorProfile'
    SecurityQuestionUserFactorProfile:
      type: object
      properties:
        answer:
          type: string
        question:
          type: string
        questionText:
          type: string
    SeedEnum:
      type: string
      enum:
        - OKTA
        - RANDOM
    Session:
      type: object
      properties:
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        amr:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/SessionAuthenticationMethod'
        createdAt:
          type: string
          format: date-time
          readOnly: true
        expiresAt:
          type: string
          format: date-time
          readOnly: true
        id:
          type: string
          readOnly: true
        idp:
          $ref: '#/components/schemas/SessionIdentityProvider'
        lastFactorVerification:
          type: string
          format: date-time
          readOnly: true
        lastPasswordVerification:
          type: string
          format: date-time
          readOnly: true
        login:
          type: string
          readOnly: true
        status:
          $ref: '#/components/schemas/SessionStatus'
        userId:
          type: string
          readOnly: true
    SessionAuthenticationMethod:
      type: string
      enum:
        - pwd
        - swk
        - hwk
        - otp
        - sms
        - tel
        - geo
        - fpt
        - kba
        - mfa
    SessionIdentityProvider:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        type:
          $ref: '#/components/schemas/SessionIdentityProviderType'
    SessionIdentityProviderType:
      type: string
      enum:
        - ACTIVE_DIRECTORY
        - LDAP
        - OKTA
        - FEDERATION
        - SOCIAL
    SessionStatus:
      type: string
      enum:
        - ACTIVE
        - MFA_ENROLL
        - MFA_REQUIRED
    SignInPageTouchPointVariant:
      type: string
      enum:
        - OKTA_DEFAULT
        - BACKGROUND_SECONDARY_COLOR
        - BACKGROUND_IMAGE
    SignOnInlineHook:
      properties:
        id:
          type: string
          readOnly: false
    SingleLogout:
      type: object
      properties:
        enabled:
          type: boolean
        issuer:
          type: string
        logoutUrl:
          type: string
    SmsTemplate:
      type: object
      properties:
        created:
          type: string
          format: date-time
          readOnly: true
        id:
          type: string
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
        template:
          type: string
        translations:
          $ref: '#/components/schemas/SmsTemplateTranslations'
        type:
          $ref: '#/components/schemas/SmsTemplateType'
    SmsTemplateTranslations:
      type: object
      x-okta-extensible: true
    SmsTemplateType:
      type: string
      enum:
        - SMS_VERIFY_CODE
    SmsUserFactor:
      allOf:
        - $ref: '#/components/schemas/UserFactor'
        - type: object
          properties:
            profile:
              $ref: '#/components/schemas/SmsUserFactorProfile'
    SmsUserFactorProfile:
      type: object
      properties:
        phoneNumber:
          type: string
    SocialAuthToken:
      type: object
      properties:
        expiresAt:
          type: string
          format: date-time
          readOnly: true
        id:
          type: string
          readOnly: true
        scopes:
          type: array
          items:
            type: string
        token:
          type: string
        tokenAuthScheme:
          type: string
        tokenType:
          type: string
    SpCertificate:
      type: object
      properties:
        x5c:
          type: array
          items:
            type: string
    Subscription:
      type: object
      properties:
        _links:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        channels:
          items:
            type: string
          type: array
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        status:
          $ref: '#/components/schemas/SubscriptionStatus'
    SubscriptionStatus:
      type: string
      enum:
        - subscribed
        - unsubscribed
    SwaApplication:
      x-okta-defined-as:
        name: template_swa
      allOf:
        - $ref: '#/components/schemas/BrowserPluginApplication'
        - type: object
          properties:
            name:
              type: string
              default: template_swa
            settings:
              $ref: '#/components/schemas/SwaApplicationSettings'
    SwaApplicationSettings:
      allOf:
        - $ref: '#/components/schemas/ApplicationSettings'
        - type: object
          properties:
            app:
              $ref: '#/components/schemas/SwaApplicationSettingsApplication'
    SwaApplicationSettingsApplication:
      allOf:
        - $ref: '#/components/schemas/ApplicationSettingsApplication'
        - type: object
          properties:
            buttonField:
              type: string
            checkbox:
              type: string
            loginUrlRegex:
              type: string
            passwordField:
              type: string
            redirectUrl:
              type: string
            url:
              type: string
            usernameField:
              type: string
    SwaThreeFieldApplication:
      x-okta-defined-as:
        name: template_swa3field
      allOf:
        - $ref: '#/components/schemas/BrowserPluginApplication'
        - type: object
          properties:
            name:
              type: string
              default: template_swa3field
            settings:
              $ref: '#/components/schemas/SwaThreeFieldApplicationSettings'
    SwaThreeFieldApplicationSettings:
      allOf:
        - $ref: '#/components/schemas/ApplicationSettings'
        - type: object
          properties:
            app:
              $ref: '#/components/schemas/SwaThreeFieldApplicationSettingsApplication'
    SwaThreeFieldApplicationSettingsApplication:
      allOf:
        - $ref: '#/components/schemas/ApplicationSettingsApplication'
        - type: object
          properties:
            buttonSelector:
              type: string
            extraFieldSelector:
              type: string
            extraFieldValue:
              type: string
            loginUrlRegex:
              type: string
            passwordSelector:
              type: string
            targetURL:
              type: string
            userNameSelector:
              type: string
    TempPassword:
      type: object
      properties:
        tempPassword:
          type: string
          readOnly: true
    Theme:
      type: object
      properties:
        _links:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        backgroundImage:
          readOnly: true
          type: string
        emailTemplateTouchPointVariant:
          $ref: '#/components/schemas/EmailTemplateTouchPointVariant'
        endUserDashboardTouchPointVariant:
          $ref: '#/components/schemas/EndUserDashboardTouchPointVariant'
        errorPageTouchPointVariant:
          $ref: '#/components/schemas/ErrorPageTouchPointVariant'
        primaryColorContrastHex:
          type: string
        primaryColorHex:
          type: string
        secondaryColorContrastHex:
          type: string
        secondaryColorHex:
          type: string
        signInPageTouchPointVariant:
          $ref: '#/components/schemas/SignInPageTouchPointVariant'
    ThemeResponse:
      type: object
      properties:
        _links:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        backgroundImage:
          readOnly: true
          type: string
        emailTemplateTouchPointVariant:
          $ref: '#/components/schemas/EmailTemplateTouchPointVariant'
        endUserDashboardTouchPointVariant:
          $ref: '#/components/schemas/EndUserDashboardTouchPointVariant'
        errorPageTouchPointVariant:
          $ref: '#/components/schemas/ErrorPageTouchPointVariant'
        favicon:
          readOnly: true
          type: string
        id:
          readOnly: true
          type: string
        logo:
          readOnly: true
          type: string
        primaryColorContrastHex:
          type: string
        primaryColorHex:
          type: string
        secondaryColorContrastHex:
          type: string
        secondaryColorHex:
          type: string
        signInPageTouchPointVariant:
          $ref: '#/components/schemas/SignInPageTouchPointVariant'
    ThreatInsightConfiguration:
      type: object
      properties:
        action:
          type: string
        excludeZones:
          type: array
          items:
            type: string
        created:
          type: string
          format: date-time
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
    TokenAuthorizationServerPolicyRuleAction:
      type: object
      properties:
        accessTokenLifetimeMinutes:
          type: integer
        refreshTokenLifetimeMinutes:
          type: integer
        refreshTokenWindowMinutes:
          type: integer
        inlineHook:
          $ref: '#/components/schemas/TokenAuthorizationServerPolicyRuleActionInlineHook'
    TokenAuthorizationServerPolicyRuleActionInlineHook:
      type: object
      properties:
        id:
          type: string
          readOnly: false
    TokenUserFactor:
      allOf:
        - $ref: '#/components/schemas/UserFactor'
        - type: object
          properties:
            profile:
              $ref: '#/components/schemas/TokenUserFactorProfile'
    TokenUserFactorProfile:
      type: object
      properties:
        credentialId:
          type: string
    TotpUserFactor:
      allOf:
        - $ref: '#/components/schemas/UserFactor'
        - type: object
          properties:
            profile:
              $ref: '#/components/schemas/TotpUserFactorProfile'
    TotpUserFactorProfile:
      type: object
      properties:
        credentialId:
          type: string
    TrustedOrigin:
      type: object
      properties:
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        createdBy:
          type: string
        id:
          type: string
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        lastUpdatedBy:
          type: string
        name:
          type: string
        origin:
          type: string
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/TrustedOriginScope'
        status:
          type: string
    TrustedOriginScope:
      type: object
      properties:
        stringValue:
          type: string
        type:
          $ref: '#/components/schemas/TrustedOriginScopeType'
    TrustedOriginScopeType:
      type: string
      enum:
        - CORS
        - REDIRECT
    U2fUserFactor:
      allOf:
        - $ref: '#/components/schemas/UserFactor'
        - type: object
          properties:
            profile:
              $ref: '#/components/schemas/U2fUserFactorProfile'
    U2fUserFactorProfile:
      type: object
      properties:
        credentialId:
          type: string
    User:
      type: object
      properties:
        _embedded:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        activated:
          type: string
          format: date-time
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        credentials:
          $ref: '#/components/schemas/UserCredentials'
        id:
          type: string
          readOnly: true
        lastLogin:
          type: string
          format: date-time
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        passwordChanged:
          type: string
          format: date-time
          readOnly: true
        profile:
          $ref: '#/components/schemas/UserProfile'
        status:
          $ref: '#/components/schemas/UserStatus'
        statusChanged:
          type: string
          format: date-time
          readOnly: true
        transitioningToStatus:
          $ref: '#/components/schemas/UserStatus'
        type:
          $ref: '#/components/schemas/UserType'
    UserActivationToken:
      type: object
      properties:
        activationToken:
          type: string
          readOnly: true
        activationUrl:
          type: string
          readOnly: true
    UserCondition:
      type: object
      properties:
        exclude:
          type: array
          items:
            type: string
        include:
          type: array
          items:
            type: string
    UserCredentials:
      type: object
      properties:
        password:
          $ref: '#/components/schemas/PasswordCredential'
        provider:
          $ref: '#/components/schemas/AuthenticationProvider'
        recovery_question:
          $ref: '#/components/schemas/RecoveryQuestionCredential'
    UserFactor:
      type: object
      properties:
        _embedded:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        factorType:
          $ref: '#/components/schemas/FactorType'
        id:
          type: string
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        provider:
          $ref: '#/components/schemas/FactorProvider'
        status:
          $ref: '#/components/schemas/FactorStatus'
        verify:
          $ref: '#/components/schemas/VerifyFactorRequest'
      discriminator:
        propertyName: factorType
        mapping:
          call: '#/components/schemas/CallUserFactor'
          email: '#/components/schemas/EmailUserFactor'
          push: '#/components/schemas/PushUserFactor'
          question: '#/components/schemas/SecurityQuestionUserFactor'
          sms: '#/components/schemas/SmsUserFactor'
          token: '#/components/schemas/TokenUserFactor'
          token:hardware: '#/components/schemas/HardwareUserFactor'
          token:hotp: '#/components/schemas/CustomHotpUserFactor'
          token:software:totp: '#/components/schemas/TotpUserFactor'
          u2f: '#/components/schemas/U2fUserFactor'
          web: '#/components/schemas/WebUserFactor'
          webauthn: '#/components/schemas/WebAuthnUserFactor'
          hotp: '#/components/schemas/CustomHotpUserFactor'
    UserIdString:
      type: object
      properties:
        userId:
          type: string
    UserIdentifierConditionEvaluatorPattern:
      type: object
      properties:
        matchType:
          $ref: '#/components/schemas/UserIdentifierMatchType'
        value:
          type: string
    UserIdentifierMatchType:
      type: string
      enum:
        - SUFFIX
        - EXPRESSION
        - STARTS_WITH
        - EQUALS
        - CONTAINS
    UserIdentifierPolicyRuleCondition:
      type: object
      properties:
        attribute:
          type: string
        patterns:
          type: array
          items:
            $ref: '#/components/schemas/UserIdentifierConditionEvaluatorPattern'
        type:
          $ref: '#/components/schemas/UserIdentifierType'
    UserIdentifierType:
      type: string
      enum:
        - IDENTIFIER
        - ATTRIBUTE
    UserIdentityProviderLinkRequest:
      type: object
      properties:
        externalId:
          type: string
    UserLifecycleAttributePolicyRuleCondition:
      type: object
      properties:
        attributeName:
          type: string
        matchingValue:
          type: string
    UserNextLogin:
      type: string
      enum:
        - changePassword
    UserPolicyRuleCondition:
      type: object
      properties:
        exclude:
          type: array
          items:
            type: string
        inactivity:
          $ref: '#/components/schemas/InactivityPolicyRuleCondition'
        include:
          type: array
          items:
            type: string
        lifecycleExpiration:
          $ref: '#/components/schemas/LifecycleExpirationPolicyRuleCondition'
        passwordExpiration:
          $ref: '#/components/schemas/PasswordExpirationPolicyRuleCondition'
        userLifecycleAttribute:
          $ref: '#/components/schemas/UserLifecycleAttributePolicyRuleCondition'
    UserProfile:
      type: object
      properties:
        city:
          type: string
        costCenter:
          type: string
        countryCode:
          type: string
        department:
          type: string
        displayName:
          type: string
        division:
          type: string
        email:
          type: string
        employeeNumber:
          type: string
        firstName:
          type: string
        honorificPrefix:
          type: string
        honorificSuffix:
          type: string
        lastName:
          type: string
        locale:
          type: string
        login:
          type: string
        manager:
          type: string
        managerId:
          type: string
        middleName:
          type: string
        mobilePhone:
          type: string
        nickName:
          type: string
        organization:
          type: string
        postalAddress:
          type: string
        preferredLanguage:
          type: string
        primaryPhone:
          type: string
        profileUrl:
          type: string
        secondEmail:
          type: string
        state:
          type: string
        streetAddress:
          type: string
        timezone:
          type: string
        title:
          type: string
        userType:
          type: string
        zipCode:
          type: string
      x-okta-extensible: true
    UserSchema:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        $schema:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        title:
          type: string
        lastUpdated:
          type: string
          readOnly: true
        created:
          type: string
          readOnly: true
        definitions:
          $ref: '#/components/schemas/UserSchemaDefinitions'
        type:
          type: string
          readOnly: true
        properties:
          $ref: '#/components/schemas/UserSchemaProperties'
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
    UserSchemaAttribute:
      type: object
      properties:
        title:
          type: string
        type:
          $ref: '#/components/schemas/UserSchemaAttributeType'
        required:
          type: boolean
        mutability:
          type: string
        scope:
          $ref: '#/components/schemas/UserSchemaAttributeScope'
        enum:
          type: array
          items:
            type: string
        oneOf:
          type: array
          items:
            $ref: '#/components/schemas/UserSchemaAttributeEnum'
        minLength:
          type: integer
        maxLength:
          type: integer
        description:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/UserSchemaAttributePermission'
        master:
          $ref: '#/components/schemas/UserSchemaAttributeMaster'
        union:
          $ref: '#/components/schemas/UserSchemaAttributeUnion'
        items:
          $ref: '#/components/schemas/UserSchemaAttributeItems'
        pattern:
          type: string
        unique:
          type: string
        externalName:
          type: string
        externalNamespace:
          type: string
    UserSchemaAttributeEnum:
      type: object
      properties:
        const:
          type: string
        title:
          type: string
    UserSchemaAttributeItems:
      type: object
      properties:
        enum:
          type: array
          items:
            type: string
        oneOf:
          type: array
          items:
            $ref: '#/components/schemas/UserSchemaAttributeEnum'
        type:
          type: string
    UserSchemaAttributeMaster:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/UserSchemaAttributeMasterType'
        priority:
          type: array
          items:
            $ref: '#/components/schemas/UserSchemaAttributeMasterPriority'
    UserSchemaAttributeMasterPriority:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
    UserSchemaAttributeMasterType:
      type: string
      enum:
        - PROFILE_MASTER
        - OKTA
        - OVERRIDE
    UserSchemaAttributePermission:
      type: object
      properties:
        principal:
          type: string
        action:
          type: string
    UserSchemaAttributeScope:
      type: string
      enum:
        - SELF
        - NONE
    UserSchemaAttributeType:
      type: string
      enum:
        - string
        - boolean
        - number
        - integer
        - array
    UserSchemaAttributeUnion:
      type: string
      enum:
        - DISABLE
        - ENABLE
    UserSchemaBase:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        properties:
          $ref: '#/components/schemas/UserSchemaBaseProperties'
        required:
          type: array
          items:
            type: string
    UserSchemaBaseProperties:
      type: object
      properties:
        login:
          $ref: '#/components/schemas/UserSchemaAttribute'
        firstName:
          $ref: '#/components/schemas/UserSchemaAttribute'
        lastName:
          $ref: '#/components/schemas/UserSchemaAttribute'
        middleName:
          $ref: '#/components/schemas/UserSchemaAttribute'
        honorificPrefix:
          $ref: '#/components/schemas/UserSchemaAttribute'
        honorificSuffix:
          $ref: '#/components/schemas/UserSchemaAttribute'
        email:
          $ref: '#/components/schemas/UserSchemaAttribute'
        title:
          $ref: '#/components/schemas/UserSchemaAttribute'
        displayName:
          $ref: '#/components/schemas/UserSchemaAttribute'
        nickName:
          $ref: '#/components/schemas/UserSchemaAttribute'
        profileUrl:
          $ref: '#/components/schemas/UserSchemaAttribute'
        secondEmail:
          $ref: '#/components/schemas/UserSchemaAttribute'
        mobilePhone:
          $ref: '#/components/schemas/UserSchemaAttribute'
        primaryPhone:
          $ref: '#/components/schemas/UserSchemaAttribute'
        streetAddress:
          $ref: '#/components/schemas/UserSchemaAttribute'
        city:
          $ref: '#/components/schemas/UserSchemaAttribute'
        state:
          $ref: '#/components/schemas/UserSchemaAttribute'
        zipCode:
          $ref: '#/components/schemas/UserSchemaAttribute'
        countryCode:
          $ref: '#/components/schemas/UserSchemaAttribute'
        postalAddress:
          $ref: '#/components/schemas/UserSchemaAttribute'
        preferredLanguage:
          $ref: '#/components/schemas/UserSchemaAttribute'
        locale:
          $ref: '#/components/schemas/UserSchemaAttribute'
        timezone:
          $ref: '#/components/schemas/UserSchemaAttribute'
        userType:
          $ref: '#/components/schemas/UserSchemaAttribute'
        employeeNumber:
          $ref: '#/components/schemas/UserSchemaAttribute'
        costCenter:
          $ref: '#/components/schemas/UserSchemaAttribute'
        organization:
          $ref: '#/components/schemas/UserSchemaAttribute'
        division:
          $ref: '#/components/schemas/UserSchemaAttribute'
        department:
          $ref: '#/components/schemas/UserSchemaAttribute'
        managerId:
          $ref: '#/components/schemas/UserSchemaAttribute'
        manager:
          $ref: '#/components/schemas/UserSchemaAttribute'
    UserSchemaDefinitions:
      type: object
      properties:
        base:
          $ref: '#/components/schemas/UserSchemaBase'
        custom:
          $ref: '#/components/schemas/UserSchemaPublic'
    UserSchemaProperties:
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/UserSchemaPropertiesProfile'
    UserSchemaPropertiesProfile:
      type: object
      properties:
        allOf:
          type: array
          items:
            $ref: '#/components/schemas/UserSchemaPropertiesProfileItem'
    UserSchemaPropertiesProfileItem:
      type: object
      properties:
        $ref:
          type: string
    UserSchemaPublic:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/UserSchemaAttribute'
        required:
          type: array
          items:
            type: string
    UserStatus:
      type: string
      enum:
        - ACTIVE
        - DEPROVISIONED
        - LOCKED_OUT
        - PASSWORD_EXPIRED
        - PROVISIONED
        - RECOVERY
        - STAGED
        - SUSPENDED
    UserStatusPolicyRuleCondition:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/PolicyUserStatus'
    UserType:
      type: object
      properties:
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        createdBy:
          type: string
          readOnly: true
        default:
          type: boolean
          readOnly: true
        description:
          type: string
        displayName:
          type: string
        id:
          type: string
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        lastUpdatedBy:
          type: string
          readOnly: true
        name:
          type: string
    UserTypeCondition:
      properties:
        exclude:
          items:
            type: string
          type: array
        include:
          items:
            type: string
          type: array
    UserVerificationEnum:
      type: string
      enum:
        - REQUIRED
        - PREFERRED
    VerificationMethod:
      type: object
      properties:
        constraints:
          items:
            $ref: '#/components/schemas/AccessPolicyConstraints'
          type: array
        factorMode:
          type: string
        reauthenticateIn:
          type: string
        type:
          type: string
    VerifyFactorRequest:
      type: object
      properties:
        activationToken:
          type: string
        answer:
          type: string
        attestation:
          type: string
        clientData:
          type: string
        nextPassCode:
          type: string
        passCode:
          type: string
        registrationData:
          type: string
        stateToken:
          type: string
    VerifyUserFactorResponse:
      type: object
      properties:
        _embedded:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        _links:
          type: object
          additionalProperties:
            type: object
            properties: {}
          readOnly: true
        expiresAt:
          type: string
          format: date-time
          readOnly: true
        factorResult:
          $ref: '#/components/schemas/VerifyUserFactorResult'
        factorResultMessage:
          type: string
    VerifyUserFactorResult:
      type: string
      enum:
        - SUCCESS
        - EXPIRED
        - CHALLENGE
        - WAITING
        - FAILED
        - REJECTED
        - TIMEOUT
        - TIME_WINDOW_EXCEEDED
        - PASSCODE_REPLAYED
        - ERROR
    WebAuthnUserFactor:
      allOf:
        - $ref: '#/components/schemas/UserFactor'
        - type: object
          properties:
            profile:
              $ref: '#/components/schemas/WebAuthnUserFactorProfile'
    WebAuthnUserFactorProfile:
      type: object
      properties:
        credentialId:
          type: string
        authenticatorName:
          type: string
    WebUserFactor:
      allOf:
        - $ref: '#/components/schemas/UserFactor'
        - type: object
          properties:
            profile:
              $ref: '#/components/schemas/WebUserFactorProfile'
    WebUserFactorProfile:
      type: object
      properties:
        credentialId:
          type: string
    WsFederationApplication:
      x-okta-defined-as:
        name: template_wsfed
      allOf:
        - $ref: '#/components/schemas/Application'
        - type: object
          properties:
            name:
              type: string
              default: template_wsfed
            settings:
              $ref: '#/components/schemas/WsFederationApplicationSettings'
    WsFederationApplicationSettings:
      allOf:
        - $ref: '#/components/schemas/ApplicationSettings'
        - type: object
          properties:
            app:
              $ref: '#/components/schemas/WsFederationApplicationSettingsApplication'
    WsFederationApplicationSettingsApplication:
      allOf:
        - $ref: '#/components/schemas/ApplicationSettingsApplication'
        - type: object
          properties:
            attributeStatements:
              type: string
            audienceRestriction:
              type: string
            authnContextClassRef:
              type: string
            groupFilter:
              type: string
            groupName:
              type: string
            groupValueFormat:
              type: string
            nameIDFormat:
              type: string
            realm:
              type: string
            siteURL:
              type: string
            usernameAttribute:
              type: string
            wReplyOverride:
              type: boolean
            wReplyURL:
              type: string
  examples:
    CAPTCHAInstanceRequestHCaptcha:
      value:
        name: myHCaptcha
        secretKey: xxxxxxxxxxx
        siteKey: xxxxxxxxxxx
        type: HCAPTCHA
    CAPTCHAInstanceRequestReCaptcha:
      value:
        name: myReCaptcha
        secretKey: xxxxxxxxxxx
        siteKey: yyyyyyyyyyyyyyy
        type: RECAPTCHA_V2
    CAPTCHAInstanceResponseHCaptcha:
      value:
        id: abcd1234
        name: myHCaptcha
        siteKey: xxxxxxxxxxx
        type: HCAPTCHA
        _link:
          self:
            href: https://your-subdomain.okta.com/api/v1/captchas/abcd1234
            hints:
              allow:
                - GET
                - POST
                - PUT
                - DELETE
    CAPTCHAInstanceResponseReCaptcha:
      value:
        id: abcd4567
        name: myReCaptcha
        siteKey: yyyyyyyyyyyyyyy
        type: RECAPTCHA_V2
        _link:
          self:
            href: https://your-subdomain.okta.com/api/v1/captchas/abcd4567
            hints:
              allow:
                - GET
                - POST
                - PUT
                - DELETE
    ErrorApiValidationFailed:
      value:
        errorCode: E0000001
        errorSummary: 'Api validation failed: {0}'
        errorLink: E0000001
        errorId: sampleiCF-8D5rLW6myqiPItW
        errorCauses: []
    ErrorCAPTCHALimitOfOne:
      value:
        errorCode: E0000165
        errorSummary: CAPTCHA count limit reached. At most one CAPTCHA instance is allowed per Org.
        errorLink: E0000165
        errorId: oaejrB1fWL1S7mc-2KcG-SOtw
        errorCauses: []
    ErrorCAPTCHAOrgWideSetting:
      value:
        errorCode: E0000149
        errorSummary: Current CAPTCHA is associated with org-wide settings, cannot be removed.
        errorLink: E0000149
        errorId: samplezsusshPdiTWiITwqBt8
        errorCauses: []
    ErrorResourceNotFound:
      value:
        errorCode: E0000007
        errorSummary: 'Not found: {0}'
        errorLink: E0000007
        errorId: sampleMlLvGUj_YD5v16vkYWY
        errorCauses: []
  parameters:
    pathCaptchaId:
      name: captchaId
      in: path
      schema:
        type: string
        example: abcd1234
      required: true
      description: id of the CAPTCHA
    queryAfter:
      name: after
      in: query
      schema:
        type: string
      description: The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) for more information.
    queryLimit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 20
      description: A limit on the number of objects to return.
